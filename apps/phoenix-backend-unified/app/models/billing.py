"""
üí≥ Mod√®les Billing Phoenix Luna Hub
Int√©gration Stripe s√©curis√©e conforme Directive Oracle
"""

from __future__ import annotations
from pydantic import BaseModel, Field, validator
from typing import Optional, Literal, Dict, Any, List
from datetime import datetime

# Codes officiels des packs Luna (align√©s UI/UX)
PackCode = Literal["cafe_luna", "petit_dej_luna", "repas_luna", "luna_unlimited"]

class CreateIntentInput(BaseModel):
    """Requ√™te cr√©ation PaymentIntent Stripe"""
    user_id: str = Field(..., description="UUID utilisateur", min_length=1)
    pack: PackCode = Field(..., description="Code du pack Luna")
    currency: str = Field("eur", description="Devise ISO 3166", pattern=r"^[a-z]{3}$")
    
    @validator('user_id')
    def validate_user_id(cls, v):
        """Validation UUID format"""
        import uuid
        try:
            uuid.UUID(v)
            return v
        except ValueError:
            raise ValueError("user_id must be a valid UUID")

class CreateIntentOutput(BaseModel):
    """R√©ponse cr√©ation PaymentIntent"""
    success: bool = True
    intent_id: str = Field(..., description="ID PaymentIntent Stripe")
    client_secret: str = Field(..., description="Client secret pour frontend")
    amount: int = Field(..., description="Montant en centimes")
    currency: str = Field(..., description="Devise")
    pack: PackCode = Field(..., description="Pack s√©lectionn√©")
    energy_units: int = Field(..., description="Unit√©s d'√©nergie du pack")

class ConfirmPaymentInput(BaseModel):
    """Requ√™te confirmation paiement"""
    user_id: str = Field(..., description="UUID utilisateur")
    intent_id: str = Field(..., description="ID PaymentIntent Stripe", min_length=1)
    
    @validator('user_id')
    def validate_user_id(cls, v):
        import uuid
        try:
            uuid.UUID(v)
            return v
        except ValueError:
            raise ValueError("user_id must be a valid UUID")

class ConfirmPaymentOutput(BaseModel):
    """R√©ponse confirmation paiement"""
    success: bool = True
    status: str = Field(..., description="Statut de l'op√©ration")
    energy_added: int = Field(..., description="√ânergie ajout√©e")
    bonus_applied: bool = Field(default=False, description="Bonus premier achat appliqu√©")
    bonus_units: int = Field(default=0, description="Unit√©s bonus accord√©es")
    new_energy_balance: int = Field(..., description="Nouveau solde √©nerg√©tique")
    event_id: str = Field(..., description="ID √©v√©nement Event Store")
    transaction_id: Optional[str] = Field(None, description="ID transaction interne")

class PurchaseHistoryOutput(BaseModel):
    """Historique des achats utilisateur"""
    success: bool = True
    user_id: str
    total_purchases: int = Field(..., description="Nombre total d'achats")
    total_spent_cents: int = Field(..., description="Total d√©pens√© en centimes")
    total_energy_purchased: int = Field(..., description="Total √©nergie achet√©e")
    purchases: List[Dict[str, Any]] = Field(..., description="Liste des achats")

class RefundRequestInput(BaseModel):
    """Requ√™te de remboursement √©nergie"""
    user_id: str = Field(..., description="UUID utilisateur")
    action_event_id: str = Field(..., description="ID √©v√©nement EnergyConsumed √† rembourser")
    reason: Optional[str] = Field(None, description="Raison du remboursement", max_length=280)
    
    @validator('user_id')
    def validate_user_id(cls, v):
        import uuid
        try:
            uuid.UUID(v)
            return v
        except ValueError:
            raise ValueError("user_id must be a valid UUID")

class RefundRequestOutput(BaseModel):
    """R√©ponse remboursement √©nergie"""
    success: bool = True
    status: str = Field(..., description="Statut du remboursement")
    refunded_units: int = Field(..., description="Unit√©s rembours√©es")
    new_energy_balance: int = Field(..., description="Nouveau solde")
    refund_event_id: str = Field(..., description="ID √©v√©nement remboursement")
    original_action: Optional[str] = Field(None, description="Action originale rembours√©e")

class PackInfo(BaseModel):
    """Informations sur un pack Luna"""
    code: PackCode
    name: str
    description: str
    price_cents: int
    energy_units: int
    savings_vs_cafe: Optional[float] = None
    popular: bool = False
    features: List[str] = []

class BillingStatsOutput(BaseModel):
    """Statistiques billing pour analytics"""
    success: bool = True
    total_revenue_cents: int
    total_transactions: int
    total_energy_sold: int
    popular_pack: str
    conversion_rate: float
    refund_rate: float
    first_purchase_bonus_applied: int

# Constantes des packs
PACK_CATALOG: Dict[PackCode, PackInfo] = {
    "cafe_luna": PackInfo(
        code="cafe_luna",
        name="‚òï Caf√© Luna",
        description="Pack d√©couverte parfait pour commencer",
        price_cents=299,
        energy_units=100,
        popular=True,
        features=["Bonus +10% premier achat", "Id√©al pour tester", "Support communaut√©"]
    ),
    "petit_dej_luna": PackInfo(
        code="petit_dej_luna", 
        name="ü•ê Petit-d√©j Luna",
        description="L'essentiel pour une semaine productive",
        price_cents=599,
        energy_units=220,
        savings_vs_cafe=15.0,
        features=["√âconomie 15% vs Caf√©", "Semaine compl√®te", "Acc√®s prioritaire"]
    ),
    "repas_luna": PackInfo(
        code="repas_luna",
        name="üçï Repas Luna", 
        description="Pack complet pour utilisateurs intensifs",
        price_cents=999,
        energy_units=400,
        savings_vs_cafe=33.0,
        popular=True,
        features=["√âconomie 33% vs Caf√©", "Utilisateur power", "Fonctionnalit√©s avanc√©es"]
    )
}

# Validation des constantes
def get_pack_info(pack_code: PackCode) -> PackInfo:
    """R√©cup√®re les informations d'un pack"""
    return PACK_CATALOG[pack_code]

def get_pack_price(pack_code: PackCode) -> int:
    """R√©cup√®re le prix d'un pack en centimes"""
    return PACK_CATALOG[pack_code].price_cents

def get_pack_energy(pack_code: PackCode) -> int:
    """R√©cup√®re les unit√©s d'√©nergie d'un pack"""
    return PACK_CATALOG[pack_code].energy_units

def calculate_first_purchase_bonus(pack_code: PackCode, base_energy: int) -> int:
    """Calcule le bonus premier achat (seulement pour caf√©)"""
    if pack_code == "cafe_luna":
        return round(base_energy * 0.10)  # +10% pour le caf√©
    return 0