"""
üåô Phoenix Luna - User Energy Model
Mod√®le de donn√©es pour l'√©nergie Luna
"""

from datetime import datetime, timezone
from typing import Optional, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum


class EnergyActionType(str, Enum):
    """Types d'actions sur l'√©nergie"""
    CONSUME = "consume"
    REFUND = "refund"
    PURCHASE = "purchase"
    BONUS = "bonus"


class EnergyPackType(str, Enum):
    """Types de packs d'√©nergie Luna"""
    CAFE_LUNA = "cafe_luna"          # 2,99‚Ç¨ = 100% √©nergie
    PETIT_DEJ_LUNA = "petit_dej_luna"  # 5,99‚Ç¨ = 100% √©nergie
    REPAS_LUNA = "repas_luna"        # 9,99‚Ç¨ = 100% √©nergie
    LUNA_UNLIMITED = "luna_unlimited"  # 29,99‚Ç¨/mois = illimit√©


class UserEnergyModel(BaseModel):
    """Mod√®le principal de l'√©nergie utilisateur"""
    
    user_id: str = Field(..., description="ID unique de l'utilisateur")
    current_energy: float = Field(default=100.0, ge=0, le=100, description="√ânergie actuelle (0-100%)")
    max_energy: float = Field(default=100.0, description="√ânergie maximum")
    last_recharge_date: Optional[datetime] = Field(None, description="Date du dernier rechargement")
    total_purchased: float = Field(default=0.0, description="Total d'√©nergie achet√©e")
    total_consumed: float = Field(default=0.0, description="Total d'√©nergie consomm√©e")
    subscription_type: Optional[str] = Field(None, description="Type d'abonnement (premium, etc.)")
    
    # M√©ta-donn√©es
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
    
    def can_perform_action(self, energy_required: float) -> bool:
        """V√©rifie si l'utilisateur peut effectuer une action"""
        return self.current_energy >= energy_required
    
    def consume_energy(self, amount: float, reason: Optional[str] = None) -> bool:
        """Consomme de l'√©nergie"""
        if not self.can_perform_action(amount):
            return False
        
        self.current_energy = max(0, self.current_energy - amount)
        self.total_consumed += amount
        self.updated_at = datetime.now(timezone.utc)
        return True
    
    def add_energy(self, amount: float, action_type: EnergyActionType = EnergyActionType.PURCHASE):
        """Ajoute de l'√©nergie"""
        self.current_energy = min(self.max_energy, self.current_energy + amount)
        
        if action_type == EnergyActionType.PURCHASE:
            self.total_purchased += amount
            self.last_recharge_date = datetime.now(timezone.utc)
        
        self.updated_at = datetime.now(timezone.utc)


class EnergyTransactionModel(BaseModel):
    """Mod√®le pour les transactions d'√©nergie"""
    
    transaction_id: str = Field(..., description="ID unique de la transaction")
    user_id: str = Field(..., description="ID de l'utilisateur")
    action_type: EnergyActionType = Field(..., description="Type d'action")
    amount: float = Field(..., description="Montant d'√©nergie")
    reason: Optional[str] = Field(None, description="Raison de la transaction")
    
    # Contexte de la transaction
    context: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Contexte m√©tier")
    app_source: Optional[str] = Field(None, description="App d'origine (letters, cv, etc.)")
    feature_used: Optional[str] = Field(None, description="Fonctionnalit√© utilis√©e")
    
    # √âtat avant/apr√®s
    energy_before: float = Field(..., description="√ânergie avant transaction")
    energy_after: float = Field(..., description="√ânergie apr√®s transaction")
    
    # Timestamps
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class EnergyPurchaseModel(BaseModel):
    """Mod√®le pour les achats d'√©nergie"""
    
    purchase_id: str = Field(..., description="ID unique de l'achat")
    user_id: str = Field(..., description="ID de l'utilisateur")
    pack_type: EnergyPackType = Field(..., description="Type de pack achet√©")
    
    # D√©tails financiers
    amount_euro: float = Field(..., description="Montant en euros")
    energy_amount: float = Field(..., description="Quantit√© d'√©nergie achet√©e")
    
    # D√©tails Stripe
    stripe_payment_intent_id: Optional[str] = Field(None, description="ID Stripe du paiement")
    payment_status: str = Field(default="pending", description="Statut du paiement")
    
    # Bonus
    bonus_energy: float = Field(default=0.0, description="√ânergie bonus (premier achat, etc.)")
    
    # Timestamps
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    processed_at: Optional[datetime] = Field(None, description="Date de traitement")
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


# Configuration des co√ªts d'√©nergie selon la grille Oracle
ENERGY_COSTS = {
    # Actions simples (5-10%)
    "conseil_rapide": 5,
    "correction_ponctuelle": 5,
    "format_lettre": 8,
    "verification_format": 3,        # Phoenix CV - V√©rification format gratuite
    
    # Actions moyennes (10-20%)
    "lettre_motivation": 15,
    "optimisation_cv": 12,
    "analyse_offre": 10,
    
    # Actions complexes (20-40%)
    "analyse_cv_complete": 25,
    "mirror_match": 30,
    "salary_analysis": 20,           # Phoenix CV - Analyse salariale
    "transition_carriere": 35,       # Phoenix Letters - Strat√©gie reconversion
    "strategie_candidature": 35,
    
    # Actions premium (35-50%)
    "audit_complet_profil": 45,
    "plan_reconversion": 50,
    "simulation_entretien": 40,
}

# Configuration des packs d'√©nergie
ENERGY_PACKS = {
    EnergyPackType.CAFE_LUNA: {
        "price_euro": 2.99,
        "energy_amount": 100.0,
        "bonus_first_purchase": 10.0,
        "name": "Caf√© Luna"
    },
    EnergyPackType.PETIT_DEJ_LUNA: {
        "price_euro": 5.99,
        "energy_amount": 100.0,
        "bonus_first_purchase": 0.0,
        "name": "Petit-d√©j Luna",
        "popular": True
    },
    EnergyPackType.REPAS_LUNA: {
        "price_euro": 9.99,
        "energy_amount": 100.0,
        "bonus_first_purchase": 0.0,
        "name": "Repas Luna",
        "best_deal": True
    },
    EnergyPackType.LUNA_UNLIMITED: {
        "price_euro": 29.99,
        "energy_amount": -1,  # Illimit√©
        "name": "Luna Unlimited",
        "subscription": True
    }
}