"""
üåô Phoenix Journal Narratif - Data Transfer Objects
Mod√®les Pydantic pour l'Ar√®ne du Premier H√©ros
"""

from pydantic import BaseModel, Field, validator
from typing import List, Optional, Literal, Dict, Any
from datetime import datetime


class JournalUser(BaseModel):
    """Profil utilisateur pour le Journal"""
    id: str = Field(..., description="ID utilisateur")
    first_name: str = Field(..., description="Pr√©nom utilisateur")
    plan: Literal["standard", "unlimited"] = Field(..., description="Plan utilisateur")


class JournalEnergy(BaseModel):
    """√âtat √©nerg√©tique utilisateur"""
    balance_pct: float = Field(..., ge=0, le=100, description="√ânergie actuelle (0-100%)")
    last_purchase: Optional[str] = Field(None, description="Derni√®re recharge ISO8601")


class JournalKpiAts(BaseModel):
    """M√©triques ATS pour progression narrative"""
    value: float = Field(..., ge=0, le=100, description="Score ATS moyen actuel")
    target: float = Field(..., ge=0, le=100, description="Score ATS cible")
    trend: Literal["up", "down", "flat"] = Field(..., description="Tendance progression")
    delta_pct_14d: float = Field(..., description="√âvolution % sur 14 jours")


class JournalKpiLetters(BaseModel):
    """M√©triques lettres de motivation"""
    value: int = Field(..., ge=0, description="Nombre de lettres g√©n√©r√©es")


class JournalKPIs(BaseModel):
    """Ensemble des KPIs narratifs"""
    ats_mean: Optional[JournalKpiAts] = None
    letters_count: Optional[JournalKpiLetters] = None


class JournalChapter(BaseModel):
    """Chapitre individuel du r√©cit utilisateur"""
    id: str = Field(..., description="ID unique du chapitre")
    type: Literal["cv", "letter", "analysis", "milestone", "energy", "other"] = Field(
        ..., description="Type de chapitre"
    )
    title: str = Field(..., description="Titre du chapitre")
    gain: List[str] = Field(default_factory=list, description="Gains obtenus")
    ts: str = Field(..., description="Timestamp ISO8601")


class JournalNextStep(BaseModel):
    """Action sugg√©r√©e pour progression"""
    action: str = Field(..., description="Nom de l'action selon grille Oracle")
    cost_pct: float = Field(..., ge=0, le=100, description="Co√ªt en % d'√©nergie")
    expected_gain: str = Field(..., description="B√©n√©fice attendu lisible")


class JournalNarrative(BaseModel):
    """Structure narrative compl√®te"""
    chapters: List[JournalChapter] = Field(default_factory=list, description="Chapitres chronologiques")
    kpis: JournalKPIs = Field(..., description="Indicateurs de progression")
    last_doubt: Optional[str] = Field(None, description="Dernier doute exprim√©")
    next_steps: List[JournalNextStep] = Field(default_factory=list, description="Prochaines √©tapes sugg√©r√©es")


class JournalSocialProof(BaseModel):
    """Comparaisons anonymis√©es pour levier appartenance"""
    peers_percentage_recommended_step: float = Field(
        default=0.0, ge=0, le=1, description="% d'utilisateurs similaires ayant fait X"
    )
    recommended_label: Optional[str] = Field(None, description="Action recommand√©e libell√©")


class JournalEthics(BaseModel):
    """Rempart √©thique - propri√©t√© des donn√©es"""
    ownership: bool = Field(default=True, description="Propri√©t√© des donn√©es utilisateur")
    export_available: bool = Field(default=True, description="Export du r√©cit disponible")


class JournalDTO(BaseModel):
    """DTO principal du Journal Narratif - R√©ponse endpoint agr√©gateur"""
    user: JournalUser = Field(..., description="Profil utilisateur")
    energy: JournalEnergy = Field(..., description="√âtat √©nerg√©tique")
    narrative: JournalNarrative = Field(..., description="Structure narrative")
    social_proof: Optional[JournalSocialProof] = Field(None, description="Comparaisons sociales")
    ethics: JournalEthics = Field(default_factory=JournalEthics, description="√âthique et propri√©t√©")

    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


# ============================================================================
# MODELS POUR ENERGY PREVIEW
# ============================================================================

class EnergyPreviewRequest(BaseModel):
    """Requ√™te de pr√©visualisation d'√©nergie"""
    user_id: str = Field(..., description="ID utilisateur", min_length=1, max_length=50)
    action: str = Field(..., description="Action √† pr√©visualiser", min_length=1, max_length=100)
    
    @validator('user_id')
    def validate_user_id(cls, v):
        from app.core.security_guardian import SecurityGuardian
        return SecurityGuardian.validate_user_id(v)
    
    @validator('action')
    def validate_action(cls, v):
        from app.models.user_energy import ENERGY_COSTS
        if v not in ENERGY_COSTS:
            raise ValueError(f"Action inconnue. Actions disponibles: {list(ENERGY_COSTS.keys())}")
        return v


class EnergyPreviewResponse(BaseModel):
    """R√©ponse de pr√©visualisation d'√©nergie"""
    action: str = Field(..., description="Action pr√©visualis√©e")
    cost_pct: float = Field(..., ge=0, le=100, description="Co√ªt en % d'√©nergie")
    balance_before: float = Field(..., ge=0, le=100, description="√ânergie avant action")
    balance_after: float = Field(..., ge=0, le=100, description="√ânergie apr√®s action")
    can_perform: bool = Field(..., description="Action r√©alisable avec √©nergie actuelle")
    unlimited_user: bool = Field(default=False, description="Utilisateur avec √©nergie illimit√©e")


# ============================================================================
# MODELS POUR EXPORT R√âCIT
# ============================================================================

class JournalExportRequest(BaseModel):
    """Requ√™te d'export du r√©cit narratif"""
    user_id: str = Field(..., description="ID utilisateur")
    format: Literal["json", "markdown", "pdf"] = Field(default="json", description="Format d'export")
    include_metadata: bool = Field(default=True, description="Inclure m√©tadonn√©es techniques")
    
    @validator('user_id')
    def validate_user_id(cls, v):
        from app.core.security_guardian import SecurityGuardian
        return SecurityGuardian.validate_user_id(v)


class JournalExportResponse(BaseModel):
    """R√©ponse d'export du r√©cit"""
    success: bool = Field(..., description="Export r√©ussi")
    download_url: Optional[str] = Field(None, description="URL de t√©l√©chargement")
    content: Optional[str] = Field(None, description="Contenu direct si petit")
    format: str = Field(..., description="Format g√©n√©r√©")
    generated_at: str = Field(..., description="Date de g√©n√©ration ISO8601")
    expires_at: Optional[str] = Field(None, description="Expiration du lien si applicable")


# ============================================================================
# MODELS POUR EVENT TRACKING
# ============================================================================

class JournalEventBase(BaseModel):
    """Base pour √©v√©nements Journal"""
    user_id: str
    timestamp: Optional[str] = None
    context: Optional[Dict[str, Any]] = None


class SessionZeroViewedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur voit Session Z√©ro"""
    event_type: Literal["SessionZeroViewed"] = "SessionZeroViewed"


class MissionSelectedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur s√©lectionne mission du jour"""
    event_type: Literal["MissionSelected"] = "MissionSelected"
    mission: str


class JournalViewedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur consulte son Journal"""
    event_type: Literal["JournalViewed"] = "JournalViewed"
    chapters_count: int = 0


class NextActionPreviewedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur pr√©visualise une action"""
    event_type: Literal["NextActionPreviewed"] = "NextActionPreviewed"
    action: str
    cost_pct: float


class ActionConfirmedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur confirme une action"""
    event_type: Literal["ActionConfirmed"] = "ActionConfirmed"
    action: str
    cost_pct: float


class ActionCancelledEvent(JournalEventBase):
    """√âv√©nement : Utilisateur annule une action"""
    event_type: Literal["ActionCancelled"] = "ActionCancelled"
    action: str
    reason: Optional[str] = None


class ChapterOpenedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur consulte d√©tail d'un chapitre"""
    event_type: Literal["ChapterOpened"] = "ChapterOpened"
    chapter_id: str
    chapter_type: str


class ReflectionAddedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur ajoute une r√©flexion"""
    event_type: Literal["ReflectionAdded"] = "ReflectionAdded"
    chapter_id: str
    reflection_text: str
    sentiment: Optional[str] = None


class MilestoneReachedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur atteint un palier"""
    event_type: Literal["MilestoneReached"] = "MilestoneReached"
    kpi: str
    value: float
    target: float


class Plan7DaysStartedEvent(JournalEventBase):
    """√âv√©nement : Utilisateur d√©marre plan 7 jours"""
    event_type: Literal["Plan7DaysStarted"] = "Plan7DaysStarted"
    plan_id: str
    objectives: List[str] = Field(default_factory=list)


# Union type pour tous les √©v√©nements Journal
JournalEvent = (
    SessionZeroViewedEvent | MissionSelectedEvent | JournalViewedEvent |
    NextActionPreviewedEvent | ActionConfirmedEvent | ActionCancelledEvent |
    ChapterOpenedEvent | ReflectionAddedEvent | MilestoneReachedEvent |
    Plan7DaysStartedEvent
)