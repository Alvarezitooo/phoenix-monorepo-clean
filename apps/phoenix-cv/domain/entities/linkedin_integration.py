"""
üîó Phoenix CV - LinkedIn Integration Entities
Entit√©s m√©tier pour l'int√©gration LinkedIn et synchronisation profil
"""

from dataclasses import dataclass, field
from typing import List, Optional, Dict, Any
from datetime import datetime
from enum import Enum
import uuid


class LinkedInConnectionStatus(Enum):
    """Statut de connexion LinkedIn"""
    DISCONNECTED = "disconnected"
    CONNECTED = "connected"
    EXPIRED = "expired"
    ERROR = "error"


class SyncStatus(Enum):
    """Statut de synchronisation"""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    PARTIAL = "partial"


class ProfileSection(Enum):
    """Sections du profil LinkedIn"""
    BASIC_INFO = "basic_info"
    EXPERIENCE = "experience"
    EDUCATION = "education"
    SKILLS = "skills"
    CERTIFICATIONS = "certifications"
    LANGUAGES = "languages"
    RECOMMENDATIONS = "recommendations"
    PROJECTS = "projects"


@dataclass
class LinkedInProfile:
    """Profil LinkedIn complet"""
    
    # Informations de base
    linkedin_id: str
    first_name: str
    last_name: str
    headline: str = ""
    summary: str = ""
    location: str = ""
    industry: str = ""
    
    # Photo et URLs
    profile_picture_url: Optional[str] = None
    public_profile_url: Optional[str] = None
    
    # Exp√©riences professionnelles
    positions: List[Dict[str, Any]] = field(default_factory=list)
    
    # Formation
    educations: List[Dict[str, Any]] = field(default_factory=list)
    
    # Comp√©tences et certifications
    skills: List[str] = field(default_factory=list)
    certifications: List[Dict[str, Any]] = field(default_factory=list)
    
    # Langues
    languages: List[Dict[str, str]] = field(default_factory=list)
    
    # Projets et publications
    projects: List[Dict[str, Any]] = field(default_factory=list)
    publications: List[Dict[str, Any]] = field(default_factory=list)
    
    # M√©tadonn√©es
    connections_count: int = 0
    followers_count: int = 0
    last_updated: datetime = field(default_factory=datetime.now)
    raw_data: Dict[str, Any] = field(default_factory=dict)


@dataclass
class LinkedInConnection:
    """Connexion LinkedIn d'un utilisateur"""
    
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str = ""
    
    # Authentification OAuth
    access_token: str = ""
    refresh_token: Optional[str] = None
    token_expires_at: Optional[datetime] = None
    
    # Informations LinkedIn
    linkedin_user_id: str = ""
    profile_data: Optional[LinkedInProfile] = None
    
    # Statut de connexion
    status: LinkedInConnectionStatus = LinkedInConnectionStatus.DISCONNECTED
    connection_date: datetime = field(default_factory=datetime.now)
    last_sync: Optional[datetime] = None
    
    # Configuration de sync
    auto_sync_enabled: bool = True
    sync_frequency_hours: int = 24
    enabled_sections: List[ProfileSection] = field(default_factory=lambda: [
        ProfileSection.BASIC_INFO,
        ProfileSection.EXPERIENCE,
        ProfileSection.EDUCATION,
        ProfileSection.SKILLS
    ])
    
    # M√©tadonn√©es
    error_message: Optional[str] = None
    sync_count: int = 0
    
    @property
    def is_token_valid(self) -> bool:
        """V√©rifie si le token est encore valide"""
        if not self.token_expires_at:
            return bool(self.access_token)
        return datetime.now() < self.token_expires_at
    
    @property
    def needs_sync(self) -> bool:
        """V√©rifie si une synchronisation est n√©cessaire"""
        if not self.last_sync:
            return True
        
        hours_since_sync = (datetime.now() - self.last_sync).total_seconds() / 3600
        return hours_since_sync >= self.sync_frequency_hours


@dataclass
class ProfileSyncMapping:
    """Mapping entre profil LinkedIn et CV"""
    
    # Mapping des champs de base
    field_mappings: Dict[str, str] = field(default_factory=lambda: {
        "firstName": "first_name",
        "lastName": "last_name", 
        "headline": "professional_title",
        "summary": "professional_summary",
        "location": "location",
        "industry": "industry"
    })
    
    # Mapping des exp√©riences
    experience_mapping: Dict[str, str] = field(default_factory=lambda: {
        "title": "position_title",
        "companyName": "company_name",
        "description": "description",
        "startDate": "start_date",
        "endDate": "end_date",
        "location": "location"
    })
    
    # Mapping des formations
    education_mapping: Dict[str, str] = field(default_factory=lambda: {
        "schoolName": "institution",
        "fieldOfStudy": "field_of_study",
        "degree": "degree_type",
        "startDate": "start_date",
        "endDate": "end_date"
    })
    
    # Sections √† ignorer lors de la sync
    ignored_sections: List[str] = field(default_factory=lambda: [
        "recommendations", "honors", "volunteer"
    ])


@dataclass
class SyncOperation:
    """Op√©ration de synchronisation"""
    
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str = ""
    connection_id: str = ""
    
    # Configuration de l'op√©ration
    sync_direction: str = "linkedin_to_cv"  # linkedin_to_cv, cv_to_linkedin, bidirectional
    sections_to_sync: List[ProfileSection] = field(default_factory=list)
    
    # √âtat de l'op√©ration
    status: SyncStatus = SyncStatus.PENDING
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    
    # R√©sultats
    synced_sections: List[ProfileSection] = field(default_factory=list)
    failed_sections: List[ProfileSection] = field(default_factory=list)
    changes_made: Dict[str, Any] = field(default_factory=dict)
    
    # Erreurs et logs
    error_message: Optional[str] = None
    sync_logs: List[str] = field(default_factory=list)
    
    @property
    def success_rate(self) -> float:
        """Calcule le taux de succ√®s de la synchronisation"""
        if not self.sections_to_sync:
            return 0.0
        
        total_sections = len(self.sections_to_sync)
        successful_sections = len(self.synced_sections)
        
        return (successful_sections / total_sections) * 100.0
    
    def add_log(self, message: str):
        """Ajoute un log √† l'op√©ration"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.sync_logs.append(f"[{timestamp}] {message}")


@dataclass
class LinkedInIntegrationResult:
    """
    üéØ R√©sultat d'int√©gration LinkedIn compl√®te
    """
    
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str = ""
    cv_id: Optional[str] = None
    
    # Connexion LinkedIn
    connection: LinkedInConnection = field(default_factory=LinkedInConnection)
    
    # Donn√©es synchronis√©es
    linkedin_profile: Optional[LinkedInProfile] = None
    sync_operations: List[SyncOperation] = field(default_factory=list)
    
    # Analyse de compatibilit√©
    profile_completeness: float = field(default=0.0)  # 0-100%
    cv_linkedin_match_score: float = field(default=0.0)  # 0-100%
    
    # Recommandations d'am√©lioration
    missing_sections: List[ProfileSection] = field(default_factory=list)
    improvement_suggestions: List[str] = field(default_factory=list)
    
    # Insights professionnels
    industry_insights: List[str] = field(default_factory=list)
    network_insights: List[str] = field(default_factory=list)
    skill_gaps: List[str] = field(default_factory=list)
    
    # M√©tadonn√©es
    last_analysis: datetime = field(default_factory=datetime.now)
    total_syncs: int = 0
    
    def calculate_profile_completeness(self) -> float:
        """Calcule le score de compl√©tude du profil LinkedIn"""
        
        if not self.linkedin_profile:
            return 0.0
        
        profile = self.linkedin_profile
        score = 0.0
        
        # Informations de base (40 points)
        if profile.first_name and profile.last_name:
            score += 5
        if profile.headline:
            score += 10
        if profile.summary:
            score += 15
        if profile.location:
            score += 5
        if profile.profile_picture_url:
            score += 5
        
        # Exp√©riences (30 points)
        if profile.positions:
            score += min(len(profile.positions) * 10, 30)
        
        # Formation (15 points)
        if profile.educations:
            score += min(len(profile.educations) * 7, 15)
        
        # Comp√©tences (10 points)
        if profile.skills:
            score += min(len(profile.skills) * 2, 10)
        
        # Certifications et projets (5 points)
        if profile.certifications or profile.projects:
            score += 5
        
        self.profile_completeness = min(score, 100.0)
        return self.profile_completeness
    
    def generate_improvement_suggestions(self) -> List[str]:
        """G√©n√®re des suggestions d'am√©lioration du profil"""
        
        suggestions = []
        
        if not self.linkedin_profile:
            suggestions.append("Connectez votre profil LinkedIn pour obtenir des suggestions personnalis√©es")
            return suggestions
        
        profile = self.linkedin_profile
        
        # Suggestions de base
        if not profile.headline or len(profile.headline) < 50:
            suggestions.append("Am√©liorer votre titre professionnel (headline) - cible 50-120 caract√®res")
        
        if not profile.summary or len(profile.summary) < 200:
            suggestions.append("D√©velopper votre r√©sum√© professionnel - minimum 200 caract√®res recommand√©s")
        
        if len(profile.positions) < 2:
            suggestions.append("Ajouter plus d'exp√©riences professionnelles pour montrer votre progression")
        
        if len(profile.skills) < 10:
            suggestions.append("Enrichir vos comp√©tences - cible 10-20 comp√©tences cl√©s")
        
        if not profile.certifications:
            suggestions.append("Ajouter des certifications professionnelles pour cr√©dibiliser votre profil")
        
        if profile.connections_count < 100:
            suggestions.append("D√©velopper votre r√©seau professionnel - cible 100+ connexions")
        
        # Suggestions avanc√©es
        if profile.connections_count > 500 and not profile.projects:
            suggestions.append("Ajouter des projets pour mettre en valeur vos r√©alisations concr√®tes")
        
        if len(profile.languages) < 2:
            suggestions.append("Mentionner vos langues parl√©es pour des opportunit√©s internationales")
        
        self.improvement_suggestions = suggestions
        return suggestions
    
    def generate_network_insights(self) -> List[str]:
        """G√©n√®re des insights sur le r√©seau professionnel"""
        
        insights = []
        
        if not self.linkedin_profile:
            return insights
        
        profile = self.linkedin_profile
        
        # Analyse du r√©seau
        if profile.connections_count > 1000:
            insights.append("üåü Excellent r√©seau professionnel - Levier fort pour opportunit√©s")
        elif profile.connections_count > 500:
            insights.append("üë• Bon r√©seau professionnel - Continue √† d√©velopper")
        elif profile.connections_count > 100:
            insights.append("üìà R√©seau en d√©veloppement - Cible 500+ connexions qualifi√©es")
        else:
            insights.append("üéØ Priorit√©: D√©velopper votre r√©seau LinkedIn pour plus d'opportunit√©s")
        
        # Insights sectoriels
        if profile.industry:
            insights.append(f"üè¢ Secteur {profile.industry}: Connectez-vous avec des professionnels cl√©s")
        
        # Insights g√©ographiques
        if profile.location:
            insights.append(f"üìç Position {profile.location}: Excellent pour le march√© local")
        
        self.network_insights = insights
        return insights
    
    def to_dict(self) -> Dict[str, Any]:
        """S√©rialisation compl√®te pour API"""
        
        return {
            "id": self.id,
            "user_id": self.user_id,
            "cv_id": self.cv_id,
            "connection_status": self.connection.status.value,
            "linkedin_profile": {
                "linkedin_id": self.linkedin_profile.linkedin_id if self.linkedin_profile else None,
                "name": f"{self.linkedin_profile.first_name} {self.linkedin_profile.last_name}" if self.linkedin_profile else None,
                "headline": self.linkedin_profile.headline if self.linkedin_profile else None,
                "connections_count": self.linkedin_profile.connections_count if self.linkedin_profile else 0,
                "last_updated": self.linkedin_profile.last_updated.isoformat() if self.linkedin_profile else None
            },
            "analysis": {
                "profile_completeness": self.profile_completeness,
                "cv_linkedin_match_score": self.cv_linkedin_match_score,
                "total_syncs": self.total_syncs,
                "last_analysis": self.last_analysis.isoformat()
            },
            "recommendations": {
                "missing_sections": [section.value for section in self.missing_sections],
                "improvement_suggestions": self.improvement_suggestions,
                "skill_gaps": self.skill_gaps
            },
            "insights": {
                "industry_insights": self.industry_insights,
                "network_insights": self.network_insights
            },
            "sync_history": [
                {
                    "id": op.id,
                    "status": op.status.value,
                    "sections_synced": [section.value for section in op.synced_sections],
                    "success_rate": op.success_rate,
                    "completed_at": op.completed_at.isoformat() if op.completed_at else None
                }
                for op in self.sync_operations[-5:]  # 5 derni√®res syncs
            ]
        }