"""
üìù Routes Letters avec int√©gration Luna Hub compl√®te
Directive Oracle: Hub = Roi, API Contract, Everything is Event, Zero Frontend Logic
"""

from fastapi import APIRouter, Depends, HTTPException, Header, Request
from typing import Optional, Dict, Any
from pydantic import BaseModel, Field
import uuid
import time
import structlog

from infrastructure.clients.luna_client import (
    LunaClient, CheckRequest, ConsumeRequest, 
    LunaInsufficientEnergy, LunaAuthError, LunaClientError
)
from application.models.actions import LettersActionType, LettersActionValidator
from application.use_cases.generate_letter_use_case import GenerateLetterUseCase
from domain.services.letter_service import LetterService
from infrastructure.database.mock_letter_repository import MockLetterRepository

logger = structlog.get_logger("letters_routes")

router = APIRouter(prefix="/letters", tags=["letters"])

# ====== DEPENDENCIES ======

def get_token(authorization: Optional[str] = Header(None)) -> str:
    """Extraction et validation du token Bearer"""
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing Bearer token")
    return authorization.split(" ", 1)[1]

def get_correlation_id(request: Request) -> str:
    """R√©cup√®re le correlation_id depuis le middleware"""
    return getattr(request.state, 'correlation_id', str(uuid.uuid4()))

def get_luna_client(
    token: str = Depends(get_token),
    correlation_id: str = Depends(get_correlation_id)
) -> LunaClient:
    """Client Luna avec corr√©lation"""
    return LunaClient(
        token_provider=lambda: token,
        request_id_provider=lambda: correlation_id
    )

def get_letter_service() -> LetterService:
    """Service de g√©n√©ration de lettres"""
    return LetterService()

def get_generate_letter_use_case() -> GenerateLetterUseCase:
    """Use case g√©n√©ration lettre avec d√©pendances"""
    letter_repository = MockLetterRepository()
    letter_service = LetterService()
    return GenerateLetterUseCase(letter_repository, letter_service)

# ====== SCHEMAS ======

class LettersGenerateInput(BaseModel):
    """Sch√©ma d'entr√©e pour g√©n√©ration lettre"""
    user_id: str = Field(..., description="UUID utilisateur", min_length=1)
    action_type: LettersActionType = Field(default=LettersActionType.LETTRE_MOTIVATION, description="Type d'action")
    job_title: Optional[str] = Field(None, description="Titre du poste")
    company_name: Optional[str] = Field(None, description="Nom de l'entreprise")
    job_offer_text: Optional[str] = Field(None, description="Texte de l'offre d'emploi")
    user_profile: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Profil utilisateur")
    additional_context: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Contexte additionnel")
    
    class Config:
        use_enum_values = True

class LettersGenerateOutput(BaseModel):
    """Sch√©ma de sortie pour g√©n√©ration lettre"""
    success: bool
    result: Dict[str, Any]
    energy_consumed: Optional[int] = None
    energy_remaining: Optional[int] = None
    event_id: Optional[str] = None
    processing_time_ms: Optional[int] = None

class AnalyzeOfferInput(BaseModel):
    """Sch√©ma d'entr√©e pour analyse d'offre"""
    user_id: str = Field(..., description="UUID utilisateur")
    job_offer_text: str = Field(..., description="Texte de l'offre d'emploi", min_length=50)
    company_name: Optional[str] = Field(None, description="Nom de l'entreprise")
    job_title: Optional[str] = Field(None, description="Titre du poste")

class TransitionCareerInput(BaseModel):
    """Sch√©ma d'entr√©e pour transition carri√®re"""
    user_id: str = Field(..., description="UUID utilisateur")
    current_industry: str = Field(..., description="Secteur actuel")
    target_industry: str = Field(..., description="Secteur cible")
    current_role: Optional[str] = Field(None, description="Poste actuel")
    target_role: Optional[str] = Field(None, description="Poste cible")
    experience_years: Optional[int] = Field(None, description="Ann√©es d'exp√©rience")

class HealthCheckOutput(BaseModel):
    """Sch√©ma pour health check"""
    status: str
    service: str
    luna_hub_connected: bool
    dependencies: Dict[str, bool]

# ====== ROUTES PRINCIPALES ======

@router.get("/health", response_model=HealthCheckOutput)
async def health_check():
    """üè• Health check Phoenix Letters avec v√©rification Luna Hub"""
    try:
        # Test basique de connectivit√© Luna Hub
        import httpx
        async with httpx.AsyncClient(timeout=2.0) as client:
            response = await client.get("http://localhost:8003/health")
            luna_connected = (200 <= response.status_code < 300)
    except:
        luna_connected = False
    
    return HealthCheckOutput(
        status="ok" if luna_connected else "degraded",
        service="phoenix-letters",
        luna_hub_connected=luna_connected,
        dependencies={
            "luna_hub": luna_connected,
            "letter_repository": True,  # Mock toujours OK
            "letter_service": True,
            "ai_service": True
        }
    )

@router.post("/generate", response_model=LettersGenerateOutput)
async def generate_letter(
    body: LettersGenerateInput,
    luna: LunaClient = Depends(get_luna_client),
    correlation_id: str = Depends(get_correlation_id),
    use_case: GenerateLetterUseCase = Depends(get_generate_letter_use_case)
):
    """
    üìù G√©n√©ration de lettre avec orchestration Luna Hub
    Workflow Oracle: check ‚Üí execute ‚Üí consume ‚Üí return
    """
    start_time = time.time()
    
    logger.info("Letter generation requested", 
               user_id=body.user_id, 
               action_type=str(body.action_type),
               job_title=body.job_title,
               company_name=body.company_name,
               correlation_id=correlation_id)
    
    try:
        # 1. VALIDATION DES PARAM√àTRES
        context = {
            "job_title": body.job_title,
            "company_name": body.company_name,
            "job_offer_text": body.job_offer_text,
            "user_profile": body.user_profile,
            **body.additional_context
        }
        
        if not LettersActionValidator.validate_action_request(body.action_type, context):
            missing_fields = LettersActionValidator.get_required_context_fields(body.action_type)
            raise HTTPException(
                status_code=422, 
                detail=f"Missing required fields for {body.action_type}: {missing_fields}"
            )
        
        # 2. CHECK √âNERGIE (HUB D√âCIDE)
        logger.info("Checking energy with Luna Hub", action_type=str(body.action_type))
        
        try:
            check_start = time.time()
            luna.check_energy(CheckRequest(
                user_id=body.user_id, 
                action_name=str(body.action_type)
            ))
            check_duration = int((time.time() - check_start) * 1000)
            
            logger.info("Energy check successful", 
                       action_type=str(body.action_type),
                       duration_ms=check_duration)
            
        except LunaInsufficientEnergy as e:
            logger.warning("Insufficient energy", required_pack=e.required_pack)
            raise HTTPException(
                status_code=402, 
                detail={
                    "error": "insufficient_energy", 
                    "required_pack": e.required_pack,
                    "message": f"√ânergie insuffisante pour {body.action_type}. Pack requis: {e.required_pack}"
                }
            )
        except LunaAuthError:
            logger.error("Luna Hub authentication failed")
            raise HTTPException(status_code=401, detail="Unauthorized with Luna Hub")
        except LunaClientError as e:
            logger.error("Luna Hub client error", error=str(e))
            raise HTTPException(status_code=502, detail=f"Luna Hub error: {str(e)}")
        
        # 3. EX√âCUTION M√âTIER LOCALE (ZERO LOGIQUE √âNERGIE)
        logger.info("Executing letter generation business logic", action_type=str(body.action_type))
        
        business_start = time.time()
        
        if body.action_type == LettersActionType.LETTRE_MOTIVATION:
            result = await _execute_letter_generation(body, use_case)
        elif body.action_type == LettersActionType.ANALYSE_OFFRE:
            result = await _execute_offer_analysis(body, context)
        elif body.action_type == LettersActionType.TRANSITION_CARRIERE:
            result = await _execute_career_transition(body, context)
        elif body.action_type == LettersActionType.FORMAT_LETTRE:
            result = await _execute_letter_formatting(body, context)
        else:
            # Action g√©n√©rique
            result = await _execute_generic_action(body, context)
        
        business_duration = int((time.time() - business_start) * 1000)
        
        logger.info("Letter generation completed",
                   action_type=str(body.action_type),
                   duration_ms=business_duration)
        
        # 4. CONSUME √âNERGIE (G√âN√âRATION √âV√âNEMENT)
        logger.info("Consuming energy with Luna Hub")
        
        try:
            consume_start = time.time()
            consume_response = luna.consume_energy(ConsumeRequest(
                user_id=body.user_id,
                action_name=str(body.action_type),
                context={
                    "job_title": body.job_title,
                    "company_name": body.company_name,
                    "app_source": "phoenix_letters",
                    "correlation_id": correlation_id,
                    "processing_time_ms": business_duration,
                    **context
                }
            ))
            consume_duration = int((time.time() - consume_start) * 1000)
            
            logger.info("Energy consumed successfully",
                       energy_consumed=consume_response.energy_consumed,
                       energy_remaining=consume_response.energy_remaining,
                       event_id=consume_response.event_id,
                       duration_ms=consume_duration)
            
        except LunaAuthError:
            logger.error("Luna Hub authentication failed during consume")
            raise HTTPException(status_code=401, detail="Unauthorized with Luna Hub")
        except LunaClientError as e:
            logger.error("Luna Hub client error during consume", error=str(e))
            raise HTTPException(status_code=502, detail=f"Luna Hub error: {str(e)}")
        
        # 5. RETOUR UTILISATEUR
        total_duration = int((time.time() - start_time) * 1000)
        
        logger.info("Letter generation completed successfully", 
                   total_duration_ms=total_duration,
                   business_duration_ms=business_duration,
                   energy_consumed=consume_response.energy_consumed)
        
        return LettersGenerateOutput(
            success=True,
            result=result,
            energy_consumed=consume_response.energy_consumed,
            energy_remaining=consume_response.energy_remaining,
            event_id=consume_response.event_id,
            processing_time_ms=total_duration
        )
        
    except HTTPException:
        # Re-raise HTTP exceptions (d√©j√† g√©r√©es)
        raise
    except Exception as e:
        total_duration = int((time.time() - start_time) * 1000)
        logger.error("Unexpected error during letter generation", 
                    error=str(e), 
                    duration_ms=total_duration)
        
        raise HTTPException(status_code=500, detail="Internal server error")

@router.post("/analyze-offer", response_model=LettersGenerateOutput)
async def analyze_job_offer(
    body: AnalyzeOfferInput,
    luna: LunaClient = Depends(get_luna_client),
    correlation_id: str = Depends(get_correlation_id)
):
    """
    üîç Analyse d'offre d'emploi avec IA
    """
    start_time = time.time()
    action_type = LettersActionType.ANALYSE_OFFRE
    
    logger.info("Job offer analysis requested",
               user_id=body.user_id,
               job_title=body.job_title,
               company_name=body.company_name,
               correlation_id=correlation_id)
    
    try:
        # 1. CHECK √âNERGIE
        try:
            luna.check_energy(CheckRequest(
                user_id=body.user_id,
                action_name=str(action_type)
            ))
        except LunaInsufficientEnergy as e:
            raise HTTPException(
                status_code=402,
                detail={
                    "error": "insufficient_energy",
                    "required_pack": e.required_pack,
                    "message": "√ânergie insuffisante pour l'analyse d'offre"
                }
            )
        except (LunaAuthError, LunaClientError) as e:
            raise HTTPException(status_code=502, detail=str(e))
        
        # 2. EX√âCUTION ANALYSE OFFRE
        analysis_result = await _execute_offer_analysis_detailed(body)
        
        # 3. CONSUME √âNERGIE
        try:
            consume_response = luna.consume_energy(ConsumeRequest(
                user_id=body.user_id,
                action_name=str(action_type),
                context={
                    "job_title": body.job_title,
                    "company_name": body.company_name,
                    "app_source": "phoenix_letters",
                    "correlation_id": correlation_id,
                    "offer_length": len(body.job_offer_text)
                }
            ))
        except (LunaAuthError, LunaClientError) as e:
            raise HTTPException(status_code=502, detail=str(e))
        
        total_duration = int((time.time() - start_time) * 1000)
        
        return LettersGenerateOutput(
            success=True,
            result=analysis_result,
            energy_consumed=consume_response.energy_consumed,
            energy_remaining=consume_response.energy_remaining,
            event_id=consume_response.event_id,
            processing_time_ms=total_duration
        )
        
    except HTTPException:
        raise
    except Exception as e:
        total_duration = int((time.time() - start_time) * 1000)
        logger.error("Error during job offer analysis", 
                    error=str(e), 
                    duration_ms=total_duration)
        raise HTTPException(status_code=500, detail="Internal server error")

# ====== HELPERS M√âTIER ======

async def _execute_letter_generation(body: LettersGenerateInput, use_case: GenerateLetterUseCase) -> Dict[str, Any]:
    """Ex√©cute la g√©n√©ration de lettre de motivation"""
    await _simulate_ai_processing(3000)  # 3s
    
    return {
        "letter_type": "motivation",
        "job_title": body.job_title,
        "company_name": body.company_name,
        "generated_content": f"""Madame, Monsieur,

Actuellement en recherche active d'un poste de {body.job_title}, je vous fais part de ma candidature au sein de {body.company_name}.

Fort de mon exp√©rience et de ma motivation, je suis convaincu que mon profil correspond parfaitement aux exigences du poste.

[Contenu g√©n√©r√© par IA bas√© sur le profil utilisateur et l'offre]

Je reste √† votre disposition pour un entretien et vous prie d'agr√©er mes salutations distingu√©es.""",
        "personalization_score": 92,
        "suggestions": [
            "Ajouter des exemples concrets de r√©alisations",
            "Personnaliser l'accroche selon l'entreprise",
            "Mettre en avant les comp√©tences techniques requises"
        ],
        "estimated_impact": "Tr√®s forte probabilit√© de retour positif"
    }

async def _execute_offer_analysis(body: LettersGenerateInput, context: Dict[str, Any]) -> Dict[str, Any]:
    """Ex√©cute l'analyse d'offre d'emploi"""
    await _simulate_ai_processing(2000)  # 2s
    
    return {
        "analysis_type": "job_offer",
        "offer_summary": {
            "position": body.job_title or "Non sp√©cifi√©",
            "company": body.company_name or "Non sp√©cifi√©e",
            "contract_type": "CDI (d√©tect√©)",
            "salary_range": "Non mentionn√©",
            "remote_work": "Hybride possible"
        },
        "required_skills": [
            "Python", "FastAPI", "React", "PostgreSQL", "Docker"
        ],
        "nice_to_have": [
            "AWS", "Kubernetes", "TypeScript"
        ],
        "company_culture": {
            "keywords": ["innovation", "√©quipe", "agilit√©"],
            "values": ["Collaboration", "Excellence technique", "Innovation"],
            "work_environment": "Startup en croissance"
        },
        "match_score": 85,
        "recommendations": [
            "Mettre en avant votre exp√©rience Python",
            "Pr√©parer des exemples de projets FastAPI",
            "Insister sur votre adaptabilit√© en √©quipe agile"
        ]
    }

async def _execute_career_transition(body: LettersGenerateInput, context: Dict[str, Any]) -> Dict[str, Any]:
    """Ex√©cute l'analyse de transition carri√®re"""
    await _simulate_ai_processing(4000)  # 4s
    
    return {
        "transition_type": "career_change",
        "current_sector": context.get("current_industry", "Tech"),
        "target_sector": context.get("target_industry", "Finance"),
        "feasibility_score": 78,
        "transition_strategy": {
            "timeline": "6-12 mois",
            "priority_actions": [
                "Acqu√©rir certifications secteur finance",
                "D√©velopper r√©seau professionnel cible",
                "Adapter CV aux codes du secteur"
            ],
            "transferable_skills": [
                "Gestion de projet",
                "Analyse de donn√©es", 
                "Communication client"
            ],
            "skills_gap": [
                "R√©glementation financi√®re",
                "Outils sectoriels sp√©cifiques",
                "Codes culturels du secteur"
            ]
        },
        "next_steps": [
            "Identifier 3-5 entreprises cibles",
            "Planifier formation compl√©mentaire",
            "Adapter discours de motivation"
        ]
    }

async def _execute_letter_formatting(body: LettersGenerateInput, context: Dict[str, Any]) -> Dict[str, Any]:
    """Ex√©cute le formatage de lettre"""
    await _simulate_ai_processing(1000)  # 1s
    
    return {
        "formatting_type": "letter_optimization",
        "original_length": len(context.get("letter_content", "")),
        "optimized_structure": {
            "header": "‚úÖ Coordonn√©es compl√®tes",
            "introduction": "‚úÖ Accroche impactante",
            "body": "‚ö†Ô∏è D√©veloppement √† structurer en 2-3 paragraphes",
            "conclusion": "‚úÖ Formule de politesse appropri√©e"
        },
        "improvements": [
            "R√©duire de 15% la longueur totale",
            "Ajouter des puces pour la lisibilit√©",
            "Harmoniser le niveau de langage"
        ],
        "readability_score": 87,
        "professional_score": 92
    }

async def _execute_generic_action(body: LettersGenerateInput, context: Dict[str, Any]) -> Dict[str, Any]:
    """Ex√©cute une action g√©n√©rique"""
    await _simulate_ai_processing(500)  # 0.5s
    
    return {
        "action_type": str(body.action_type),
        "result": f"Action {body.action_type} ex√©cut√©e avec succ√®s",
        "context_processed": len(context),
        "recommendations": [
            "Voir les actions sp√©cialis√©es pour plus de d√©tails"
        ]
    }

async def _execute_offer_analysis_detailed(body: AnalyzeOfferInput) -> Dict[str, Any]:
    """Ex√©cute l'analyse d√©taill√©e d'offre"""
    await _simulate_ai_processing(2500)  # 2.5s
    
    return {
        "job_title": body.job_title,
        "company_name": body.company_name,
        "analysis": {
            "offer_quality_score": 88,
            "clarity_score": 92,
            "attractiveness_score": 85,
            "requirements_analysis": {
                "must_have_skills": [
                    "5+ ans exp√©rience",
                    "Ma√Ætrise Python/Django",
                    "Exp√©rience bases de donn√©es"
                ],
                "preferred_skills": [
                    "Exp√©rience cloud AWS",
                    "Connaissance DevOps"
                ],
                "soft_skills": [
                    "Esprit d'√©quipe",
                    "Autonomie",
                    "Communication"
                ]
            },
            "compensation_analysis": {
                "salary_mentioned": False,
                "benefits": ["Mutuelle", "RTT", "T√©l√©travail"],
                "career_evolution": "Mentions d'√©volution vers lead dev"
            },
            "red_flags": [],
            "green_flags": [
                "Description claire des missions",
                "√âquipe technique mentionn√©e",
                "Formation continue pr√©vue"
            ]
        },
        "application_strategy": [
            "Mettre en avant votre exp√©rience Python",
            "Pr√©parer des exemples de projets similaires",
            "Questionner sur l'√©quipe et les technologies utilis√©es"
        ]
    }

async def _simulate_ai_processing(duration_ms: int):
    """Simule le traitement IA"""
    import asyncio
    await asyncio.sleep(duration_ms / 1000)