"""
Phoenix Letters - Service Autonome
G√©n√©rateur de lettres de motivation avec IA Gemini
ZERO shared dependencies - 100% autonome
"""

import os
import logging
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
from datetime import datetime

# Load configuration
load_dotenv()

# Configuration autonome
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if GOOGLE_API_KEY:
    genai.configure(api_key=GOOGLE_API_KEY)

# Logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Page config
st.set_page_config(
    page_title="Phoenix Letters",
    page_icon="üìù", 
    layout="wide"
)


class LetterGenerator:
    """G√©n√©rateur de lettres 100% autonome"""
    
    def __init__(self):
        self.model = None
        if GOOGLE_API_KEY:
            try:
                self.model = genai.GenerativeModel('gemini-1.5-flash')
                logger.info("‚úÖ Gemini client initialis√©")
            except Exception as e:
                logger.error(f"‚ùå Erreur Gemini: {e}")
    
    def is_available(self):
        return self.model is not None
    
    def generate_letter(self, company: str, position: str, description: str = "", 
                       experience: str = "Interm√©diaire", tone: str = "Professionnel"):
        """G√©n√©ration autonome avec Gemini"""
        
        if not self.is_available():
            return self._fallback_letter(company, position, experience)
        
        prompt = f"""
G√©n√®re une lettre de motivation professionnelle pour:

- Entreprise: {company}
- Poste: {position}
- Description du poste: {description}
- Niveau d'exp√©rience: {experience}
- Ton souhait√©: {tone}

Instructions:
- Lettre compl√®te avec objet, introduction, d√©veloppement, conclusion
- Ton {tone.lower()} mais professionnel
- Mentionne des comp√©tences pertinentes pour le poste
- Maximum 300 mots
- Format pr√™t √† envoyer

Retourne uniquement la lettre, sans commentaires.
        """
        
        try:
            response = self.model.generate_content(prompt)
            if response and response.text:
                logger.info(f"‚úÖ Lettre g√©n√©r√©e pour {company}")
                return response.text.strip()
            else:
                return self._fallback_letter(company, position, experience)
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration: {e}")
            return self._fallback_letter(company, position, experience)
    
    def _fallback_letter(self, company: str, position: str, experience: str):
        """Lettre de secours autonome"""
        return f"""Objet : Candidature pour le poste de {position}

Madame, Monsieur,

Je me permets de vous adresser ma candidature pour le poste de {position} au sein de {company}.

Fort(e) d'une exp√©rience {experience.lower()}, je suis convaincu(e) que mes comp√©tences et ma motivation s'alignent parfaitement avec les exigences de ce poste.

Mon parcours professionnel m'a permis de d√©velopper une expertise solide que je souhaiterais mettre au service de votre √©quipe. Je suis particuli√®rement int√©ress√©(e) par les d√©fis que pr√©sente ce r√¥le et par l'opportunit√© de contribuer au succ√®s de {company}.

Je serais ravi(e) de vous rencontrer pour discuter de ma candidature et de la fa√ßon dont je peux apporter une valeur ajout√©e √† votre organisation.

Je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es.

[Votre nom]

---
G√©n√©r√©e par Phoenix Letters - Service Autonome"""


# Instance globale
generator = LetterGenerator()


def main():
    """Interface principale autonome"""
    
    # Header
    st.title("üìù Phoenix Letters")
    st.markdown("**G√©n√©rateur autonome de lettres de motivation avec IA**")
    
    # Status IA dans sidebar
    with st.sidebar:
        st.markdown("### ü§ñ Status IA")
        if generator.is_available():
            st.success("‚úÖ Gemini: Op√©rationnel")
        else:
            st.error("‚ùå Gemini: Indisponible")
            st.info("üí° Configurez GOOGLE_API_KEY dans .env")
        
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è Service")
        st.info("üöÄ Version 100% autonome")
        st.info("‚ùå Z√©ro shared dependencies")
    
    # Interface g√©n√©ration
    st.markdown("### ‚ú® Nouvelle lettre de motivation")
    
    with st.form("letter_form"):
        # Champs principaux
        col1, col2 = st.columns(2)
        
        with col1:
            company = st.text_input(
                "üè¢ Entreprise *", 
                placeholder="Ex: Google, Microsoft, Startup X..."
            )
            position = st.text_input(
                "üíº Poste *", 
                placeholder="Ex: D√©veloppeur, Chef de projet..."
            )
        
        with col2:
            experience = st.selectbox(
                "üìà Exp√©rience",
                ["Junior (0-2 ans)", "Interm√©diaire (2-5 ans)", "Senior (5+ ans)"]
            )
            tone = st.selectbox(
                "üé≠ Ton de la lettre",
                ["Professionnel", "Enthousiaste", "Cr√©atif", "D√©contract√©"]
            )
        
        # Description optionnelle
        description = st.text_area(
            "üìã Description du poste (optionnel)",
            placeholder="Collez ici la description du poste pour une lettre plus pr√©cise...",
            height=100
        )
        
        # G√©n√©ration
        generate = st.form_submit_button(
            "üöÄ G√©n√©rer ma lettre",
            type="primary"
        )
    
    # Process g√©n√©ration
    if generate:
        if not company or not position:
            st.error("‚ùå Veuillez renseigner au moins l'entreprise et le poste")
            return
        
        with st.spinner("ü§ñ G√©n√©ration en cours..."):
            letter = generator.generate_letter(
                company=company,
                position=position, 
                description=description,
                experience=experience.split(" ")[0],  # Extraire "Junior", "Interm√©diaire", etc.
                tone=tone
            )
        
        # Affichage r√©sultat
        if generator.is_available():
            st.success("‚úÖ Lettre g√©n√©r√©e par IA Gemini !")
        else:
            st.warning("‚ö†Ô∏è Lettre g√©n√©r√©e en mode secours (IA indisponible)")
        
        # Zone lettre avec actions
        st.markdown("### üìÑ Votre lettre de motivation")
        
        st.text_area(
            label="",
            value=letter,
            height=400,
            key="generated_letter"
        )
        
        # Actions
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Nom fichier intelligent
            filename = f"lettre_{company.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.txt"
            st.download_button(
                label="üíæ T√©l√©charger",
                data=letter,
                file_name=filename,
                mime="text/plain"
            )
        
        with col2:
            if st.button("üîÑ R√©g√©n√©rer"):
                st.rerun()
        
        with col3:
            if st.button("‚úèÔ∏è Modifier"):
                st.info("üí° Vous pouvez √©diter directement dans la zone de texte ci-dessus")
        
        # Stats simples
        word_count = len(letter.split())
        st.caption(f"üìä {word_count} mots ‚Ä¢ G√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")


if __name__ == "__main__":
    main()