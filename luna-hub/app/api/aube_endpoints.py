"""
üåô Phoenix Aube Endpoints - Assessment & Recommendation System
Luna Hub Integration - MVP Ultra-Light ‚Üí Court ‚Üí Profond
Oracle Compliance: Hub roi, Zero logic frontend, Event sourcing, S√©curit√©
"""

from fastapi import APIRouter, HTTPException, Depends, status, Request
from fastapi.responses import JSONResponse
from typing import Optional, Dict, Any, List
from datetime import datetime, timezone
import uuid
from pydantic import BaseModel, Field

# Luna Hub imports
from ..core.security_guardian import ensure_request_is_clean
from ..core.rate_limiter import rate_limiter, RateLimitScope, RateLimitResult
from ..api.auth_endpoints import get_current_user_dependency
from ..core.events import create_event
from ..core.logging_config import logger

router = APIRouter(prefix="/luna/aube", tags=["Phoenix Aube"])

class AubeSignals(BaseModel):
    """Phoenix Aube v1 - Signals collection (√©ph√©m√®res, √©thiques)"""
    appetences: Optional[Dict[str, int]] = Field(default_factory=dict, description="people vs data preferences")
    valeurs_top2: Optional[List[str]] = Field(default_factory=list, description="Top 2 values")
    taches_like: Optional[List[str]] = Field(default_factory=list, description="Preferred tasks")
    taches_avoid: Optional[List[str]] = Field(default_factory=list, description="Tasks to avoid")
    style_travail: Optional[str] = Field(default="", description="Work style preference")
    ia_appetit: Optional[int] = Field(default=5, description="AI appetite 1-10")
    skills_bridge: Optional[List[str]] = Field(default_factory=list, description="Transferable skills")
    contraintes: Optional[List[str]] = Field(default_factory=list, description="Constraints")
    risk_tolerance: Optional[int] = Field(default=5, description="Risk tolerance 1-10")
    secteur_pref: Optional[str] = Field(default="", description="Sector preference")

class AubeSessionStart(BaseModel):
    """Start Aube assessment session"""
    level: str = Field(default="ultra_light", description="ultra_light | court | profond")
    context: Optional[Dict[str, Any]] = Field(default_factory=dict, description="User context")

class AubeSessionUpdate(BaseModel):
    """Update Aube session with signals"""
    session_id: str = Field(..., description="Session identifier")
    signals: AubeSignals = Field(..., description="Collected signals")
    completed_step: str = Field(..., description="Completed step identifier")

class AubeRecommendation(BaseModel):
    """Job recommendation structure"""
    job_code: str = Field(..., description="Job code identifier")
    label: str = Field(..., description="Job label")
    score_teaser: float = Field(..., description="Recommendation score (0-1)")
    reasons: List[Dict[str, str]] = Field(..., description="Reasons for recommendation")
    counter_example: Optional[Dict[str, str]] = Field(default=None, description="Counter example")
    futureproof: Dict[str, Any] = Field(..., description="Future-proof analysis")
    timeline: Optional[List[Dict[str, Any]]] = Field(default_factory=list, description="Timeline predictions")
    ia_plan: Optional[List[Dict[str, Any]]] = Field(default_factory=list, description="IA skills plan")

@router.post("/assessment/start")
async def start_aube_assessment(
    session_data: AubeSessionStart,
    request: Request,
    current_user: dict = Depends(get_current_user_dependency()),
    _: None = Depends(ensure_request_is_clean)
):
    """
    üåô D√©marrer une session d'assessment Aube
    
    MVP: Ultra-Light (‚â§60s) ‚Üí Court (3-4min) ‚Üí Profond (7-8min)
    0% √©nergie pour exploration, event sourcing complet
    """
    try:
        # Rate limiting pour protection
        client_ip = request.client.host if request.client else "unknown"
        rate_result, rate_data = await rate_limiter.check_rate_limit(
            identifier=current_user["id"],
            scope=RateLimitScope.API_GENERAL,
            user_agent=request.headers.get("user-agent", ""),
            additional_context={"endpoint": "aube_start", "level": session_data.level}
        )
        
        if rate_result != RateLimitResult.ALLOWED:
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Rate limit exceeded for Aube assessment"
            )

        # G√©n√©ration session_id
        session_id = str(uuid.uuid4())
        
        # Event sourcing : session d√©marr√©e
        await create_event({
            "type": "aube_session_started",
            "actor_user_id": current_user["id"],
            "payload": {
                "session_id": session_id,
                "level": session_data.level,
                "context": session_data.context,
                "ip": client_ip,
                "user_agent": request.headers.get("user-agent", "")
            }
        })
        
        logger.info(f"Aube session started", 
                   user_id=current_user["id"],
                   session_id=session_id,
                   level=session_data.level)
        
        return {
            "success": True,
            "session_id": session_id,
            "level": session_data.level,
            "user_id": current_user["id"],
            "energy_cost": 0,  # MVP: exploration gratuite
            "estimated_duration_minutes": {
                "ultra_light": 1,
                "court": 4,
                "profond": 8
            }.get(session_data.level, 1),
            "next_step": "collect_signals",
            "disclaimer": "Suggestions, pas de verdicts. Tu peux ajuster/corriger."
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Aube session start error", 
                    user_id=current_user["id"], 
                    error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to start Aube assessment session"
        )

@router.post("/assessment/update")
async def update_aube_session(
    update_data: AubeSessionUpdate,
    request: Request,
    current_user: dict = Depends(get_current_user_dependency()),
    _: None = Depends(ensure_request_is_clean)
):
    """
    üîÑ Mise √† jour session Aube avec signaux collect√©s
    
    Collecte progressive: appetences ‚Üí valeurs ‚Üí t√¢ches ‚Üí style ‚Üí IA
    """
    try:
        # Event sourcing : mise √† jour session
        await create_event({
            "type": "aube_session_updated",
            "actor_user_id": current_user["id"],
            "payload": {
                "session_id": update_data.session_id,
                "completed_step": update_data.completed_step,
                "signals": update_data.signals.model_dump(),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
        })
        
        logger.info(f"Aube session updated",
                   user_id=current_user["id"],
                   session_id=update_data.session_id,
                   step=update_data.completed_step)
        
        return {
            "success": True,
            "session_id": update_data.session_id,
            "completed_step": update_data.completed_step,
            "next_step": _get_next_step(update_data.completed_step),
            "progress_pct": _calculate_progress(update_data.completed_step),
            "energy_cost": 0  # MVP: gratuit
        }
        
    except Exception as e:
        logger.error(f"Aube session update error",
                    user_id=current_user["id"],
                    session_id=update_data.session_id,
                    error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update Aube session"
        )

@router.post("/recommendations/{session_id}")
async def get_aube_recommendations(
    session_id: str,
    request: Request,
    current_user: dict = Depends(get_current_user_dependency()),
    _: None = Depends(ensure_request_is_clean),
    k: int = 3  # MVP: Top 3 teaser, V1.1: Top 5
):
    """
    üéØ G√©n√©rer recommandations m√©tiers bas√©es sur signaux Aube
    
    MVP: Top 3 m√©tiers + raisons lisibles + future-proof light
    V1.1: Top 5 + timeline + plans IA d√©taill√©s
    """
    try:
        # Simuler r√©cup√©ration signaux (en r√©alit√©: from session store/events)
        # Pour MVP, utiliser le stub du matching service existant
        mock_features = {
            "appetences": {"people": 7, "data": 4},
            "valeurs": ["autonomie", "impact"],
            "taches_like": ["ateliers", "contact_usager"],
            "ia_appetit": 6
        }
        
        # G√©n√©ration recommandations (MVP stub)
        recommendations = _generate_recommendations_mvp(mock_features, k)
        
        # Event sourcing : recommandations g√©n√©r√©es
        await create_event({
            "type": "aube_recommendations_generated",
            "actor_user_id": current_user["id"],
            "payload": {
                "session_id": session_id,
                "job_codes": [r["job_code"] for r in recommendations],
                "count": len(recommendations),
                "algorithm_version": "mvp_stub_v1"
            }
        })
        
        # G√©n√©rer chapitres Journal automatiques
        journal_chapters = await _create_journal_chapters(
            current_user["id"], 
            session_id, 
            recommendations
        )
        
        logger.info(f"Aube recommendations generated",
                   user_id=current_user["id"],
                   session_id=session_id,
                   count=len(recommendations))
        
        return {
            "success": True,
            "session_id": session_id,
            "recommendations": recommendations,
            "journal_chapters": journal_chapters,
            "meta": {
                "algorithm": "mvp_matching_v1",
                "future_proof": "light",
                "disclaimer": "Estimations bas√©es sur tendances actuelles",
                "export_available": True
            },
            "handover": {
                "cv_prefill": f"/phoenix-cv/prefill?aube_session={session_id}",
                "letters_ideas": f"/phoenix-letters/ideas?aube_session={session_id}",
                "energy_cost": 0  # MVP: handover l√©ger gratuit
            }
        }
        
    except Exception as e:
        logger.error(f"Aube recommendations error",
                    user_id=current_user["id"],
                    session_id=session_id,
                    error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to generate Aube recommendations"
        )

def _get_next_step(current_step: str) -> str:
    """D√©termine la prochaine √©tape selon le parcours MVP"""
    steps_flow = {
        "appetences": "valeurs",
        "valeurs": "taches_preferences", 
        "taches_preferences": "style_travail",
        "style_travail": "ia_attitude",
        "ia_attitude": "generate_recommendations"
    }
    return steps_flow.get(current_step, "completed")

def _calculate_progress(current_step: str) -> int:
    """Calcule le pourcentage de progression"""
    progress_map = {
        "appetences": 20,
        "valeurs": 40,
        "taches_preferences": 60,
        "style_travail": 80,
        "ia_attitude": 90,
        "completed": 100
    }
    return progress_map.get(current_step, 0)

def _generate_recommendations_mvp(features: Dict[str, Any], k: int) -> List[Dict[str, Any]]:
    """
    G√©n√©ration recommandations MVP (stub bas√© sur matching service existant)
    """
    appet = features.get("appetences", {})
    prefers_people = (appet.get("people", 0) >= appet.get("data", 0))
    
    base_recommendations = [
        {
            "job_code": "UXD",
            "label": "UX Designer", 
            "score_teaser": 0.76,
            "reasons": [
                {"feature": "valeurs", "phrase": "Autonomie + impact ‚Üí m√©tiers √† ownership"},
                {"feature": "taches_like", "phrase": "Ateliers usagers ‚Üí UX terrain"}
            ],
            "counter_example": {
                "risk": "reporting_pur", 
                "phrase": "Si tu √©vites le reporting pur‚Ä¶ Alternative : UX Research junior"
            },
            "futureproof": {
                "score_0_1": 0.76,
                "drivers": [
                    {"factor": "taches_routinisables", "direction": "down", "phrase": "T√¢ches routinisables ‚Üì"},
                    {"factor": "interaction_humaine", "direction": "up", "phrase": "Interaction humaine ‚Üë"}
                ]
            },
            "timeline": [
                {"year": 2026, "change": "‚Üë design ops outill√© IA", "signal": "adoption", "confidence": 2}
            ],
            "ia_plan": [
                {
                    "skill": "Prompting avanc√©",
                    "micro_action": "Cr√©er 3 gabarits",
                    "effort_min_per_day": 20,
                    "resource_hint": "kb://ia/prompting",
                    "benefit_phrase": "Vitesse + Qualit√©",
                    "difficulty": 1
                }
            ]
        },
        {
            "job_code": "PO",
            "label": "Product Owner",
            "score_teaser": 0.68,
            "reasons": [
                {"feature": "valeurs", "phrase": "Autonomie + impact ‚Üí ownership"}
            ],
            "counter_example": None,
            "futureproof": {
                "score_0_1": 0.68,
                "drivers": [
                    {"factor": "coordination", "direction": "up", "phrase": "Coordination humaine ‚Üë"}
                ]
            },
            "timeline": [],
            "ia_plan": []
        }
    ]
    
    if not prefers_people:
        base_recommendations.insert(0, {
            "job_code": "DA",
            "label": "Data Analyst (light)",
            "score_teaser": 0.55,
            "reasons": [
                {"feature": "taches_like", "phrase": "Analyse & optimisation ‚Üí Data light"}
            ],
            "counter_example": None,
            "futureproof": {
                "score_0_1": 0.55,
                "drivers": [
                    {"factor": "automatisation", "direction": "down", "phrase": "Automatisation ‚Üë sur t√¢ches routini√®res"}
                ]
            },
            "timeline": [
                {"year": 2027, "change": "‚Üë auto‚ÄëBI", "signal": "outillage", "confidence": 1}
            ],
            "ia_plan": [
                {
                    "skill": "Automatisation simple",
                    "micro_action": "1 workflow no‚Äëcode",
                    "effort_min_per_day": 25,
                    "resource_hint": "kb://automation/no-code",
                    "benefit_phrase": "Moins de t√¢ches r√©p√©titives",
                    "difficulty": 1
                }
            ]
        })
    
    return base_recommendations[:k]

async def _create_journal_chapters(user_id: str, session_id: str, recommendations: List[Dict[str, Any]]) -> List[Dict[str, str]]:
    """
    G√©n√®re automatiquement les chapitres Journal suite √† l'assessment Aube
    """
    try:
        chapters = []
        
        # Chapitre 1: Clart√©
        await create_event({
            "type": "journal_chapter_created",
            "actor_user_id": user_id,
            "payload": {
                "session_id": session_id,
                "chapter_type": "aube_clarity",
                "title": "J'ai clarifi√© qui je suis",
                "content": "Gr√¢ce √† Phoenix Aube, j'ai explor√© mes app√©tences et mes valeurs. Je commence √† voir plus clair dans mes aspirations professionnelles.",
                "auto_generated": True
            }
        })
        chapters.append({"type": "clarity", "title": "J'ai clarifi√© qui je suis"})
        
        # Chapitre 2: Forces
        await create_event({
            "type": "journal_chapter_created", 
            "actor_user_id": user_id,
            "payload": {
                "session_id": session_id,
                "chapter_type": "aube_strengths",
                "title": "J'ai red√©couvert mes forces cach√©es",
                "content": "Mon assessment r√©v√®le des comp√©tences transf√©rables que je n'avais pas identifi√©es. Ces atouts vont √™tre pr√©cieux pour ma transition.",
                "auto_generated": True
            }
        })
        chapters.append({"type": "strengths", "title": "J'ai red√©couvert mes forces cach√©es"})
        
        # Chapitre 3: Chemins possibles
        job_labels = [rec["label"] for rec in recommendations[:3]]
        await create_event({
            "type": "journal_chapter_created",
            "actor_user_id": user_id, 
            "payload": {
                "session_id": session_id,
                "chapter_type": "aube_paths",
                "title": "Je vois les chemins possibles devant moi",
                "content": f"Phoenix Aube m'a propos√© {len(recommendations)} pistes m√©tiers : {', '.join(job_labels)}. Chaque option a ses raisons et je comprends pourquoi elle me correspond.",
                "auto_generated": True,
                "job_codes": [rec["job_code"] for rec in recommendations]
            }
        })
        chapters.append({"type": "paths", "title": "Je vois les chemins possibles devant moi"})
        
        return chapters
        
    except Exception as e:
        logger.error(f"Journal chapters creation error", user_id=user_id, error=str(e))
        return []

@router.get("/export/{session_id}")
async def export_aube_results(
    session_id: str,
    format_type: str = "json",
    current_user: dict = Depends(get_current_user_dependency()),
    _: None = Depends(ensure_request_is_clean)
):
    """
    üì§ Export des r√©sultats Aube (√©thique & RGPD)
    
    Formats: json, pdf, csv
    Contenu: signaux anonymis√©s + recommandations + explications
    """
    try:
        # R√©cup√©rer donn√©es session (simulation)
        export_data = {
            "session_id": session_id,
            "user_id": current_user["id"],
            "export_timestamp": datetime.now(timezone.utc).isoformat(),
            "disclaimer": "Donn√©es personnelles - usage strictement personnel",
            "algorithm_version": "aube_mvp_v1",
            "signals": {
                "note": "Signaux collect√©s de mani√®re √©thique et transparente",
                "appetences": {"people": 7, "data": 4},
                "valeurs": ["autonomie", "impact"],
                "preferences": "Anonymis√© pour confidentialit√©"
            },
            "recommendations": _generate_recommendations_mvp({}, 3),
            "explanations": {
                "methodology": "Matching bas√© sur pr√©f√©rences d√©clar√©es",
                "future_proof": "Estimations bas√©es sur tendances sectorielles 2024",
                "disclaimer": "Suggestions uniquement, pas de diagnostic"
            }
        }
        
        # Event sourcing
        await create_event({
            "type": "aube_data_exported",
            "actor_user_id": current_user["id"],
            "payload": {
                "session_id": session_id,
                "format": format_type,
                "gdpr_compliant": True
            }
        })
        
        return JSONResponse(
            content=export_data,
            headers={
                "Content-Disposition": f"attachment; filename=phoenix_aube_{session_id}.{format_type}",
                "Content-Type": "application/json"
            }
        )
        
    except Exception as e:
        logger.error(f"Aube export error", user_id=current_user["id"], error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to export Aube results"
        )