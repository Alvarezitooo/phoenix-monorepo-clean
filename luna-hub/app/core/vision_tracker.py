"""
üéØ Vision Tracker - Boucle Narrative Luna
Syst√®me de vision long terme et storytelling motivationnel
SPRINT 5: Connexion objectifs et narrative personnelle
"""

from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timezone, timedelta
from dataclasses import dataclass, asdict
from enum import Enum
import structlog
from app.core.supabase_client import event_store
from app.core.redis_cache import redis_cache

logger = structlog.get_logger("vision_tracker")


class CareerPhase(str, Enum):
    """Phases de carri√®re"""
    DISCOVERY = "discovery"        # üîç D√©couverte (junior, changement)
    GROWTH = "growth"             # üìà Croissance (mont√©e comp√©tences)
    ACCELERATION = "acceleration" # üöÄ Acc√©l√©ration (leadership, senior)
    TRANSITION = "transition"     # üîÑ Transition (reconversion, pivot)
    MASTERY = "mastery"          # üëë Ma√Ætrise (expert, mentor)


class VisionCategory(str, Enum):
    """Cat√©gories d'objectifs de vision"""
    CAREER_GOAL = "career_goal"           # Poste/r√¥le vis√©
    SKILL_MASTERY = "skill_mastery"       # Comp√©tences √† ma√Ætriser  
    INDUSTRY_CHANGE = "industry_change"    # Changement secteur
    LEADERSHIP_ROLE = "leadership_role"    # √âvolution management
    ENTREPRENEURSHIP = "entrepreneurship"  # Cr√©ation entreprise
    WORK_LIFE_BALANCE = "work_life_balance" # √âquilibre vie pro/perso
    FINANCIAL_GOAL = "financial_goal"     # Objectifs salariaux
    IMPACT_MISSION = "impact_mission"     # Mission √† impact


class VisionStatus(str, Enum):
    """Statut de progression vers la vision"""
    DEFINING = "defining"         # ü§î En d√©finition
    PLANNING = "planning"        # üìã Planification
    EXECUTING = "executing"      # üî® Ex√©cution
    PROGRESSING = "progressing"  # üìà Progression visible
    BREAKTHROUGH = "breakthrough" # üöÄ Perc√©e majeure
    ACHIEVED = "achieved"        # ‚úÖ Objectif atteint
    PIVOTING = "pivoting"        # üîÑ R√©ajustement n√©cessaire


@dataclass
class VisionGoal:
    """Objectif de vision long terme"""
    goal_id: str
    category: VisionCategory
    title: str
    description: str
    target_timeline: str  # "6 mois", "2 ans", etc.
    status: VisionStatus
    progress_percentage: float = 0.0
    key_milestones: List[Dict[str, Any]] = None
    why_statement: str = ""  # Motivation profonde
    success_metrics: List[str] = None
    obstacles_identified: List[str] = None
    created_at: datetime = None
    updated_at: datetime = None
    
    def __post_init__(self):
        if self.key_milestones is None:
            self.key_milestones = []
        if self.success_metrics is None:
            self.success_metrics = []
        if self.obstacles_identified is None:
            self.obstacles_identified = []
        if self.created_at is None:
            self.created_at = datetime.now(timezone.utc)
        if self.updated_at is None:
            self.updated_at = datetime.now(timezone.utc)


@dataclass
class CareerNarrative:
    """Narrative de carri√®re personnalis√©e"""
    user_id: str
    career_phase: CareerPhase
    origin_story: str  # D'o√π vient l'utilisateur
    current_chapter: str  # O√π il en est maintenant  
    vision_statement: str  # O√π il va
    transformation_theme: str  # Le fil rouge de son √©volution
    core_strengths: List[str]
    growth_areas: List[str]
    career_pivots: List[Dict[str, Any]]  # Changements majeurs
    success_pattern: str  # Pattern de r√©ussite identifi√©
    next_story_arc: str  # Prochaine phase narrative
    created_at: datetime = None
    updated_at: datetime = None
    
    def __post_init__(self):
        if self.core_strengths is None:
            self.core_strengths = []
        if self.growth_areas is None:
            self.growth_areas = []
        if self.career_pivots is None:
            self.career_pivots = []
        if self.created_at is None:
            self.created_at = datetime.now(timezone.utc)
        if self.updated_at is None:
            self.updated_at = datetime.now(timezone.utc)


@dataclass
class UserVisionProfile:
    """Profil de vision compl√®te utilisateur"""
    user_id: str
    career_narrative: CareerNarrative
    active_goals: List[VisionGoal]
    vision_momentum: float  # 0-100, √©lan vers objectifs
    story_coherence_score: float  # Coh√©rence narrative
    last_vision_update: Optional[datetime] = None
    motivational_triggers: List[str] = None  # Ce qui le motive
    created_at: datetime = None
    updated_at: datetime = None
    
    def __post_init__(self):
        if self.motivational_triggers is None:
            self.motivational_triggers = []
        if self.created_at is None:
            self.created_at = datetime.now(timezone.utc)
        if self.updated_at is None:
            self.updated_at = datetime.now(timezone.utc)
    
    def get_primary_goal(self) -> Optional[VisionGoal]:
        """R√©cup√®re l'objectif principal en cours"""
        if not self.active_goals:
            return None
        
        # Prioriser par statut et progress
        priority_order = [
            VisionStatus.BREAKTHROUGH,
            VisionStatus.PROGRESSING, 
            VisionStatus.EXECUTING,
            VisionStatus.PLANNING,
            VisionStatus.DEFINING
        ]
        
        for status in priority_order:
            for goal in self.active_goals:
                if goal.status == status:
                    return goal
        
        return self.active_goals[0]  # Fallback
    
    def get_story_connection(self, current_action: str) -> str:
        """Connecte une action actuelle √† la narrative long terme"""
        primary_goal = self.get_primary_goal()
        if not primary_goal:
            return f"Chaque action construit ton histoire professionnelle ! {current_action} te fait avancer."
        
        # Templates de connexion narrative
        connection_templates = {
            VisionCategory.CAREER_GOAL: f"Chaque {current_action} te rapproche de ton objectif : {primary_goal.title} !",
            VisionCategory.SKILL_MASTERY: f"Cette {current_action} d√©veloppe tes comp√©tences pour devenir {primary_goal.title} !",
            VisionCategory.INDUSTRY_CHANGE: f"Ta {current_action} construit ton profil pour ta transition vers {primary_goal.title} !",
            VisionCategory.LEADERSHIP_ROLE: f"Cette {current_action} forge ta cr√©dibilit√© de futur {primary_goal.title} !"
        }
        
        return connection_templates.get(
            primary_goal.category, 
            f"Cette {current_action} √©crit la suite de ton histoire vers {primary_goal.title} !"
        )


class VisionTracker:
    """
    üéØ Syst√®me de vision long terme et narrative motivationnelle
    
    Responsabilit√©s:
    - Analyser les objectifs long terme depuis interactions  
    - Construire la narrative de carri√®re personnalis√©e
    - Connecter actions quotidiennes √† la vision
    - G√©n√©rer storytelling motivationnel
    """
    
    def __init__(self):
        """Initialise le tracker avec les templates narratifs"""
        self._setup_narrative_templates()
    
    def _setup_narrative_templates(self):
        """Configuration des templates narratifs par phase"""
        
        self.phase_narratives = {
            CareerPhase.DISCOVERY: {
                "current_chapter_templates": [
                    "Tu explores tes possibilit√©s et d√©couvres tes vraies passions",
                    "Tu construis tes bases et identifies ce qui te fait vibrer",
                    "Tu exp√©rimentes pour trouver ta voie authentique"
                ],
                "transformation_themes": [
                    "De la d√©couverte √† l'expertise",
                    "R√©v√©ler ton potentiel unique",
                    "Construire ton identit√© professionnelle"
                ],
                "motivational_angles": [
                    "Chaque exp√©rience r√©v√®le qui tu es vraiment",
                    "Tu es en train de cr√©er les bases de ton succ√®s",
                    "Cette phase forge ton expertise future"
                ]
            },
            
            CareerPhase.GROWTH: {
                "current_chapter_templates": [
                    "Tu d√©veloppes ton expertise et gagnes en confiance",
                    "Tu montes en comp√©tences et √©largis ton impact",
                    "Tu passes de d√©butant √† contributeur reconnu"
                ],
                "transformation_themes": [
                    "L'ascension vers l'expertise",
                    "De contributeur √† leader d'opinion", 
                    "Construire ton influence professionnelle"
                ],
                "motivational_angles": [
                    "Chaque comp√©tence acquise multiplie tes opportunit√©s",
                    "Tu es en train de devenir incontournable",
                    "Ton expertise se reconna√Æt et s'affirme"
                ]
            },
            
            CareerPhase.ACCELERATION: {
                "current_chapter_templates": [
                    "Tu prends des responsabilit√©s et influences ton environnement",
                    "Tu passes de ex√©cutant √† d√©cideur strat√©gique",
                    "Tu guides les autres et shapes l'avenir"
                ],
                "transformation_themes": [
                    "L'√©mergence du leadership",
                    "De manager √† visionnaire",
                    "Cr√©er l'impact √† grande √©chelle"
                ],
                "motivational_angles": [
                    "Tes d√©cisions influencent l'avenir de l'√©quipe",
                    "Tu es devenu la r√©f√©rence dans ton domaine",
                    "Ton leadership inspire les autres √† grandir"
                ]
            },
            
            CareerPhase.TRANSITION: {
                "current_chapter_templates": [
                    "Tu r√©inventes ta carri√®re avec courage et vision",
                    "Tu transformes ton exp√©rience en nouvel avantage",
                    "Tu √©cris un nouveau chapitre de ton histoire"
                ],
                "transformation_themes": [
                    "La r√©invention courageuse",
                    "Transformer l'exp√©rience en opportunit√©",
                    "Cr√©er sa nouvelle identit√© professionnelle"
                ],
                "motivational_angles": [
                    "Ton pass√© devient ta force diff√©renciante",
                    "Tu prouves que tout est possible avec de la d√©termination",
                    "Cette transition r√©v√®le ton vrai potentiel"
                ]
            }
        }
        
        # Templates de connexion action ‚Üí vision
        self.action_vision_connectors = {
            "cv_optimization": "optimiser ton CV",
            "letter_writing": "r√©diger une lettre percutante", 
            "skill_assessment": "√©valuer tes comp√©tences",
            "job_search": "rechercher des opportunit√©s",
            "interview_prep": "pr√©parer un entretien",
            "network_building": "d√©velopper ton r√©seau"
        }
    
    async def get_user_vision_profile(self, user_id: str) -> UserVisionProfile:
        """
        üéØ G√©n√®re le profil de vision complet utilisateur
        
        Args:
            user_id: ID de l'utilisateur
            
        Returns:
            UserVisionProfile: Profil avec narrative et objectifs
        """
        try:
            # 1. V√©rifier cache Redis
            cached_profile = await self._get_cached_vision(user_id)
            if cached_profile:
                return cached_profile
            
            # 2. Analyser les √©v√©nements pour d√©tecter la narrative
            career_narrative = await self._analyze_career_narrative(user_id)
            
            # 3. Extraire les objectifs de vision depuis les interactions
            active_goals = await self._extract_vision_goals(user_id)
            
            # 4. Calculer momentum et coh√©rence
            vision_momentum = self._calculate_vision_momentum(active_goals)
            story_coherence = self._calculate_story_coherence(career_narrative, active_goals)
            
            # 5. Identifier triggers motivationnels
            motivational_triggers = await self._identify_motivational_triggers(user_id)
            
            # 6. Construire le profil
            profile = UserVisionProfile(
                user_id=user_id,
                career_narrative=career_narrative,
                active_goals=active_goals,
                vision_momentum=vision_momentum,
                story_coherence_score=story_coherence,
                motivational_triggers=motivational_triggers,
                last_vision_update=datetime.now(timezone.utc)
            )
            
            # 7. Cache pour 1 heure
            await self._cache_vision_profile(user_id, profile)
            
            logger.info("Vision profile generated",
                       user_id=user_id,
                       career_phase=career_narrative.career_phase.value,
                       active_goals_count=len(active_goals),
                       vision_momentum=vision_momentum,
                       story_coherence=story_coherence)
            
            return profile
            
        except Exception as e:
            logger.error("Error generating vision profile", user_id=user_id, error=str(e))
            # Retourner profil minimal
            return self._create_default_vision_profile(user_id)
    
    async def _analyze_career_narrative(self, user_id: str) -> CareerNarrative:
        """Analyse les √©v√©nements pour construire la narrative de carri√®re"""
        try:
            # R√©cup√©rer historique sur 6 mois pour vision long terme
            end_date = datetime.now(timezone.utc)
            start_date = end_date - timedelta(days=180)
            
            events = await event_store.get_user_events(
                user_id=user_id,
                start_date=start_date,
                end_date=end_date
            )
            
            # Analyser les patterns pour d√©duire la phase de carri√®re
            career_phase = self._deduce_career_phase(events)
            
            # Construire les √©l√©ments narratifs
            phase_templates = self.phase_narratives.get(career_phase, self.phase_narratives[CareerPhase.GROWTH])
            
            return CareerNarrative(
                user_id=user_id,
                career_phase=career_phase,
                origin_story=self._extract_origin_story(events),
                current_chapter=self._select_random_template(phase_templates["current_chapter_templates"]),
                vision_statement=self._extract_vision_statement(events),
                transformation_theme=self._select_random_template(phase_templates["transformation_themes"]),
                core_strengths=self._identify_core_strengths(events),
                growth_areas=self._identify_growth_areas(events),
                career_pivots=self._extract_career_pivots(events),  # ‚úÖ AJOUT MANQUANT
                success_pattern=self._identify_success_pattern(events),
                next_story_arc=self._predict_next_story_arc(career_phase)
            )
            
        except Exception as e:
            logger.error("Error analyzing career narrative", user_id=user_id, error=str(e))
            return self._create_default_career_narrative(user_id)
    
    def _deduce_career_phase(self, events: List[Dict]) -> CareerPhase:
        """D√©duit la phase de carri√®re depuis les √©v√©nements"""
        if not events:
            return CareerPhase.DISCOVERY
        
        # Analyser les types d'actions pour d√©duire le niveau
        action_patterns = {
            "basics_learning": 0,  # CV de base, premiers pas
            "skill_building": 0,   # Optimisations, formations
            "strategic_actions": 0, # Leadership, mentoring
            "transition_signals": 0 # Reconversion, pivot
        }
        
        for event in events:
            event_type = event.get("event_type", "")
            payload = event.get("payload", {})
            
            # Pattern recognition basique
            if any(keyword in event_type for keyword in ["first", "intro", "basic"]):
                action_patterns["basics_learning"] += 1
            elif any(keyword in event_type for keyword in ["optimization", "skill", "training"]):
                action_patterns["skill_building"] += 1
            elif any(keyword in event_type for keyword in ["leadership", "strategy", "advanced"]):
                action_patterns["strategic_actions"] += 1
            elif any(keyword in event_type for keyword in ["career_change", "transition", "pivot"]):
                action_patterns["transition_signals"] += 1
        
        # Logique de d√©duction
        total_actions = sum(action_patterns.values())
        if total_actions == 0:
            return CareerPhase.DISCOVERY
        
        if action_patterns["transition_signals"] > total_actions * 0.3:
            return CareerPhase.TRANSITION
        elif action_patterns["strategic_actions"] > total_actions * 0.4:
            return CareerPhase.ACCELERATION
        elif action_patterns["skill_building"] > total_actions * 0.5:
            return CareerPhase.GROWTH
        else:
            return CareerPhase.DISCOVERY
    
    async def _extract_vision_goals(self, user_id: str) -> List[VisionGoal]:
        """Extrait les objectifs de vision depuis les interactions utilisateur"""
        # Pour cette premi√®re version, on cr√©e des objectifs par d√©faut
        # TODO: Impl√©menter extraction r√©elle depuis conversations Luna
        
        default_goals = [
            VisionGoal(
                goal_id=f"{user_id}_career_growth",
                category=VisionCategory.CAREER_GOAL,
                title="D√©crocher un poste senior dans mon domaine",
                description="√âvoluer vers un r√¥le avec plus de responsabilit√©s",
                target_timeline="12-18 mois",
                status=VisionStatus.EXECUTING,
                progress_percentage=35.0,
                why_statement="Pour avoir plus d'impact et d√©velopper mon leadership",
                success_metrics=["Obtenir 3 entretiens/mois", "N√©gocier 20%+ de salaire", "Manager une √©quipe"]
            )
        ]
        
        return default_goals
    
    def _calculate_vision_momentum(self, goals: List[VisionGoal]) -> float:
        """Calcule l'√©lan vers les objectifs de vision"""
        if not goals:
            return 30.0  # Momentum faible par d√©faut
        
        # Score bas√© sur statut et progr√®s des objectifs
        total_momentum = 0
        for goal in goals:
            status_scores = {
                VisionStatus.BREAKTHROUGH: 95,
                VisionStatus.PROGRESSING: 80,
                VisionStatus.EXECUTING: 65,
                VisionStatus.PLANNING: 45,
                VisionStatus.DEFINING: 25,
                VisionStatus.PIVOTING: 35,
                VisionStatus.ACHIEVED: 100
            }
            
            base_score = status_scores.get(goal.status, 50)
            progress_bonus = goal.progress_percentage * 0.3
            total_momentum += base_score + progress_bonus
        
        return min(100, total_momentum / len(goals))
    
    def _calculate_story_coherence(self, narrative: CareerNarrative, goals: List[VisionGoal]) -> float:
        """Calcule la coh√©rence entre narrative et objectifs"""
        if not goals:
            return 70.0  # Coh√©rence moyenne par d√©faut
        
        # Score bas√© sur alignement phase de carri√®re / objectifs
        coherence_score = 75.0  # Base
        
        # Bonus si objectifs align√©s avec phase
        for goal in goals:
            if narrative.career_phase == CareerPhase.GROWTH and goal.category == VisionCategory.SKILL_MASTERY:
                coherence_score += 10
            elif narrative.career_phase == CareerPhase.ACCELERATION and goal.category == VisionCategory.LEADERSHIP_ROLE:
                coherence_score += 10
            elif narrative.career_phase == CareerPhase.TRANSITION and goal.category == VisionCategory.INDUSTRY_CHANGE:
                coherence_score += 10
        
        return min(100, coherence_score)
    
    def _select_random_template(self, templates: List[str]) -> str:
        """S√©lectionne un template al√©atoire"""
        import random
        return random.choice(templates) if templates else "Tu construis ton avenir professionnel"
    
    def _extract_origin_story(self, events: List[Dict]) -> str:
        """Extrait l'histoire d'origine depuis les √©v√©nements"""
        # Version simplifi√©e
        return "Professionnel ambitieux en qu√™te d'√©volution"
    
    def _extract_vision_statement(self, events: List[Dict]) -> str:
        """Extrait la d√©claration de vision"""
        return "Devenir un expert reconnu dans mon domaine"
    
    def _identify_core_strengths(self, events: List[Dict]) -> List[str]:
        """Identifie les forces principales"""
        return ["D√©termination", "Capacit√© d'apprentissage", "Vision strat√©gique"]
    
    def _identify_growth_areas(self, events: List[Dict]) -> List[str]:
        """Identifie les zones de d√©veloppement"""  
        return ["Leadership", "Communication", "Networking"]
    
    def _extract_career_pivots(self, events: List[Dict]) -> List[Dict[str, Any]]:
        """‚úÖ Extrait les moments pivots de carri√®re depuis les √©v√©nements"""
        # Analyser events pour identifier changements majeurs
        pivots = []
        
        # Pour l'instant, retourner liste vide pour √©viter l'erreur
        # TODO: Impl√©menter logique d'extraction des pivots r√©els
        return []
    
    def _identify_success_pattern(self, events: List[Dict]) -> str:
        """Identifie le pattern de r√©ussite"""
        return "Progression par optimisations continues"
    
    def _predict_next_story_arc(self, phase: CareerPhase) -> str:
        """Pr√©dit le prochain arc narratif"""
        next_arcs = {
            CareerPhase.DISCOVERY: "Sp√©cialisation et mont√©e en expertise",
            CareerPhase.GROWTH: "Prise de leadership et influence √©largie", 
            CareerPhase.ACCELERATION: "Mentorat et cr√©ation de valeur",
            CareerPhase.TRANSITION: "Ma√Ætrise du nouveau domaine",
            CareerPhase.MASTERY: "Transmission et innovation"
        }
        return next_arcs.get(phase, "√âvolution continue")
    
    async def _identify_motivational_triggers(self, user_id: str) -> List[str]:
        """Identifie ce qui motive vraiment l'utilisateur"""
        # Version simplifi√©e avec triggers universels
        return [
            "Impact et reconnaissance",
            "D√©veloppement personnel", 
            "S√©curit√© financi√®re",
            "√âquilibre vie pro/perso"
        ]
    
    def _create_default_vision_profile(self, user_id: str) -> UserVisionProfile:
        """Cr√©e un profil de vision par d√©faut"""
        default_narrative = CareerNarrative(
            user_id=user_id,
            career_phase=CareerPhase.GROWTH,
            origin_story="Professionnel motiv√© par l'√©volution",
            current_chapter="Tu d√©veloppes ton expertise et gagnes en confiance",
            vision_statement="Devenir un expert reconnu dans ton domaine",
            transformation_theme="L'ascension vers l'expertise",
            core_strengths=["Motivation", "Pers√©v√©rance"],
            growth_areas=["Leadership", "Networking"],
            career_pivots=[],  # ‚úÖ AJOUT MANQUANT
            success_pattern="Am√©lioration continue",
            next_story_arc="Prise de responsabilit√©s accrues"
        )
        
        return UserVisionProfile(
            user_id=user_id,
            career_narrative=default_narrative,
            active_goals=[],
            vision_momentum=50.0,
            story_coherence_score=75.0,
            motivational_triggers=["Impact", "Croissance", "Reconnaissance"]
        )
    
    def _create_default_career_narrative(self, user_id: str) -> CareerNarrative:
        """Cr√©e une narrative par d√©faut"""
        return CareerNarrative(
            user_id=user_id,
            career_phase=CareerPhase.GROWTH,
            origin_story="Professionnel en √©volution",
            current_chapter="Tu construis ton expertise",
            vision_statement="Atteindre tes objectifs de carri√®re",
            transformation_theme="Croissance professionnelle",
            core_strengths=["D√©termination"],
            growth_areas=["Leadership"],
            career_pivots=[],  # ‚úÖ AJOUT MANQUANT
            success_pattern="Progression constante",
            next_story_arc="√âlargissement d'impact"
        )
    
    async def _get_cached_vision(self, user_id: str) -> Optional[UserVisionProfile]:
        """R√©cup√®re profil depuis cache"""
        try:
            cached_data = await redis_cache.get("vision", user_id)
            if cached_data:
                return self._dict_to_vision_profile(cached_data)
        except Exception as e:
            logger.warning("Vision cache retrieval failed", user_id=user_id, error=str(e))
        return None
    
    async def _cache_vision_profile(self, user_id: str, profile: UserVisionProfile):
        """Cache le profil de vision"""
        try:
            profile_dict = self._vision_profile_to_dict(profile)
            await redis_cache.set("vision", user_id, profile_dict, ttl=3600)  # 1 heure
        except Exception as e:
            logger.warning("Vision cache storage failed", user_id=user_id, error=str(e))
    
    def _vision_profile_to_dict(self, profile: UserVisionProfile) -> Dict:
        """Convertit profil en dict pour cache"""
        return {
            "user_id": profile.user_id,
            "career_narrative": asdict(profile.career_narrative),
            "active_goals": [asdict(goal) for goal in profile.active_goals],
            "vision_momentum": profile.vision_momentum,
            "story_coherence_score": profile.story_coherence_score,
            "motivational_triggers": profile.motivational_triggers,
            "last_vision_update": profile.last_vision_update.isoformat() if profile.last_vision_update else None,
            "created_at": profile.created_at.isoformat() if profile.created_at else None,
            "updated_at": profile.updated_at.isoformat() if profile.updated_at else None
        }
    
    def _dict_to_vision_profile(self, data: Dict) -> UserVisionProfile:
        """Reconstruit profil depuis dict cache"""
        # Reconstituer career_narrative
        narrative_data = data["career_narrative"]
        narrative_data["career_phase"] = CareerPhase(narrative_data["career_phase"])
        if narrative_data.get("created_at"):
            narrative_data["created_at"] = datetime.fromisoformat(narrative_data["created_at"])
        if narrative_data.get("updated_at"):
            narrative_data["updated_at"] = datetime.fromisoformat(narrative_data["updated_at"])
        career_narrative = CareerNarrative(**narrative_data)
        
        # Reconstituer active_goals
        active_goals = []
        for goal_data in data["active_goals"]:
            goal_data["category"] = VisionCategory(goal_data["category"])
            goal_data["status"] = VisionStatus(goal_data["status"])
            if goal_data.get("created_at"):
                goal_data["created_at"] = datetime.fromisoformat(goal_data["created_at"])
            if goal_data.get("updated_at"):
                goal_data["updated_at"] = datetime.fromisoformat(goal_data["updated_at"])
            active_goals.append(VisionGoal(**goal_data))
        
        return UserVisionProfile(
            user_id=data["user_id"],
            career_narrative=career_narrative,
            active_goals=active_goals,
            vision_momentum=data["vision_momentum"],
            story_coherence_score=data["story_coherence_score"],
            motivational_triggers=data["motivational_triggers"],
            last_vision_update=datetime.fromisoformat(data["last_vision_update"]) if data.get("last_vision_update") else None,
            created_at=datetime.fromisoformat(data["created_at"]) if data.get("created_at") else None,
            updated_at=datetime.fromisoformat(data["updated_at"]) if data.get("updated_at") else None
        )


# Instance globale
vision_tracker = VisionTracker()